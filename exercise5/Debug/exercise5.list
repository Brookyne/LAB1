
exercise5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b48  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001c54  08001c54  00011c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c78  08001c78  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08001c78  08001c78  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c78  08001c78  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c78  08001c78  00011c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c7c  08001c7c  00011c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08001c80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000018  08001c98  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  08001c98  0002003c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000334e  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000fc7  00000000  00000000  0002338f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000408  00000000  00000000  00024358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000370  00000000  00000000  00024760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001581d  00000000  00000000  00024ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004cf0  00000000  00000000  0003a2ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079df5  00000000  00000000  0003efdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b8dd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000dc4  00000000  00000000  000b8e28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08001c3c 	.word	0x08001c3c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08001c3c 	.word	0x08001c3c

0800014c <display7SEG_Horizontal>:
Waystate current_WayState = horizontal_state;
LEDhorizontalstate current_LEDStateHorizontal = greenhorizontal_state;
LEDverticalstate current_LEDStateVertical = greenvertical_state;
int countTimeHorizontal = 5;
int countTimeVertical = 3;
void display7SEG_Horizontal(int num) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b09      	cmp	r3, #9
 8000158:	f200 81c9 	bhi.w	80004ee <display7SEG_Horizontal+0x3a2>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <display7SEG_Horizontal+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800018d 	.word	0x0800018d
 8000168:	080001e3 	.word	0x080001e3
 800016c:	08000239 	.word	0x08000239
 8000170:	0800028f 	.word	0x0800028f
 8000174:	080002e5 	.word	0x080002e5
 8000178:	0800033b 	.word	0x0800033b
 800017c:	08000391 	.word	0x08000391
 8000180:	080003e7 	.word	0x080003e7
 8000184:	0800043d 	.word	0x0800043d
 8000188:	08000499 	.word	0x08000499
	switch (num) {
	case 0:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 800018c:	2200      	movs	r2, #0
 800018e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000192:	48c0      	ldr	r0, [pc, #768]	; (8000494 <display7SEG_Horizontal+0x348>)
 8000194:	f001 f932 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 8000198:	2200      	movs	r2, #0
 800019a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800019e:	48bd      	ldr	r0, [pc, #756]	; (8000494 <display7SEG_Horizontal+0x348>)
 80001a0:	f001 f92c 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 80001a4:	2200      	movs	r2, #0
 80001a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001aa:	48ba      	ldr	r0, [pc, #744]	; (8000494 <display7SEG_Horizontal+0x348>)
 80001ac:	f001 f926 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, RESET);
 80001b0:	2200      	movs	r2, #0
 80001b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001b6:	48b7      	ldr	r0, [pc, #732]	; (8000494 <display7SEG_Horizontal+0x348>)
 80001b8:	f001 f920 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 80001bc:	2200      	movs	r2, #0
 80001be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001c2:	48b4      	ldr	r0, [pc, #720]	; (8000494 <display7SEG_Horizontal+0x348>)
 80001c4:	f001 f91a 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, RESET);
 80001c8:	2200      	movs	r2, #0
 80001ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ce:	48b1      	ldr	r0, [pc, #708]	; (8000494 <display7SEG_Horizontal+0x348>)
 80001d0:	f001 f914 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, SET);
 80001d4:	2201      	movs	r2, #1
 80001d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001da:	48ae      	ldr	r0, [pc, #696]	; (8000494 <display7SEG_Horizontal+0x348>)
 80001dc:	f001 f90e 	bl	80013fc <HAL_GPIO_WritePin>
		break;
 80001e0:	e185      	b.n	80004ee <display7SEG_Horizontal+0x3a2>
	case 1:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, SET);
 80001e2:	2201      	movs	r2, #1
 80001e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001e8:	48aa      	ldr	r0, [pc, #680]	; (8000494 <display7SEG_Horizontal+0x348>)
 80001ea:	f001 f907 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 80001ee:	2200      	movs	r2, #0
 80001f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001f4:	48a7      	ldr	r0, [pc, #668]	; (8000494 <display7SEG_Horizontal+0x348>)
 80001f6:	f001 f901 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 80001fa:	2200      	movs	r2, #0
 80001fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000200:	48a4      	ldr	r0, [pc, #656]	; (8000494 <display7SEG_Horizontal+0x348>)
 8000202:	f001 f8fb 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, SET);
 8000206:	2201      	movs	r2, #1
 8000208:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800020c:	48a1      	ldr	r0, [pc, #644]	; (8000494 <display7SEG_Horizontal+0x348>)
 800020e:	f001 f8f5 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 8000212:	2201      	movs	r2, #1
 8000214:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000218:	489e      	ldr	r0, [pc, #632]	; (8000494 <display7SEG_Horizontal+0x348>)
 800021a:	f001 f8ef 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, SET);
 800021e:	2201      	movs	r2, #1
 8000220:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000224:	489b      	ldr	r0, [pc, #620]	; (8000494 <display7SEG_Horizontal+0x348>)
 8000226:	f001 f8e9 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, SET);
 800022a:	2201      	movs	r2, #1
 800022c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000230:	4898      	ldr	r0, [pc, #608]	; (8000494 <display7SEG_Horizontal+0x348>)
 8000232:	f001 f8e3 	bl	80013fc <HAL_GPIO_WritePin>

		break;
 8000236:	e15a      	b.n	80004ee <display7SEG_Horizontal+0x3a2>
	case 2:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET); //0
 8000238:	2200      	movs	r2, #0
 800023a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800023e:	4895      	ldr	r0, [pc, #596]	; (8000494 <display7SEG_Horizontal+0x348>)
 8000240:	f001 f8dc 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET); //1
 8000244:	2200      	movs	r2, #0
 8000246:	f44f 7100 	mov.w	r1, #512	; 0x200
 800024a:	4892      	ldr	r0, [pc, #584]	; (8000494 <display7SEG_Horizontal+0x348>)
 800024c:	f001 f8d6 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET); //2
 8000250:	2201      	movs	r2, #1
 8000252:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000256:	488f      	ldr	r0, [pc, #572]	; (8000494 <display7SEG_Horizontal+0x348>)
 8000258:	f001 f8d0 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, RESET); //3
 800025c:	2200      	movs	r2, #0
 800025e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000262:	488c      	ldr	r0, [pc, #560]	; (8000494 <display7SEG_Horizontal+0x348>)
 8000264:	f001 f8ca 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET); //4
 8000268:	2200      	movs	r2, #0
 800026a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800026e:	4889      	ldr	r0, [pc, #548]	; (8000494 <display7SEG_Horizontal+0x348>)
 8000270:	f001 f8c4 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, SET); //5
 8000274:	2201      	movs	r2, #1
 8000276:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800027a:	4886      	ldr	r0, [pc, #536]	; (8000494 <display7SEG_Horizontal+0x348>)
 800027c:	f001 f8be 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, RESET); //6
 8000280:	2200      	movs	r2, #0
 8000282:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000286:	4883      	ldr	r0, [pc, #524]	; (8000494 <display7SEG_Horizontal+0x348>)
 8000288:	f001 f8b8 	bl	80013fc <HAL_GPIO_WritePin>
		break;
 800028c:	e12f      	b.n	80004ee <display7SEG_Horizontal+0x3a2>
	case 3:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET); //0
 800028e:	2200      	movs	r2, #0
 8000290:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000294:	487f      	ldr	r0, [pc, #508]	; (8000494 <display7SEG_Horizontal+0x348>)
 8000296:	f001 f8b1 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET); //1
 800029a:	2200      	movs	r2, #0
 800029c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002a0:	487c      	ldr	r0, [pc, #496]	; (8000494 <display7SEG_Horizontal+0x348>)
 80002a2:	f001 f8ab 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET); //2
 80002a6:	2200      	movs	r2, #0
 80002a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002ac:	4879      	ldr	r0, [pc, #484]	; (8000494 <display7SEG_Horizontal+0x348>)
 80002ae:	f001 f8a5 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, RESET); //3
 80002b2:	2200      	movs	r2, #0
 80002b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002b8:	4876      	ldr	r0, [pc, #472]	; (8000494 <display7SEG_Horizontal+0x348>)
 80002ba:	f001 f89f 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET); //4
 80002be:	2201      	movs	r2, #1
 80002c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002c4:	4873      	ldr	r0, [pc, #460]	; (8000494 <display7SEG_Horizontal+0x348>)
 80002c6:	f001 f899 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, SET); //5
 80002ca:	2201      	movs	r2, #1
 80002cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002d0:	4870      	ldr	r0, [pc, #448]	; (8000494 <display7SEG_Horizontal+0x348>)
 80002d2:	f001 f893 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, RESET); //6
 80002d6:	2200      	movs	r2, #0
 80002d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002dc:	486d      	ldr	r0, [pc, #436]	; (8000494 <display7SEG_Horizontal+0x348>)
 80002de:	f001 f88d 	bl	80013fc <HAL_GPIO_WritePin>
		break;
 80002e2:	e104      	b.n	80004ee <display7SEG_Horizontal+0x3a2>
	case 4:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, SET); //0
 80002e4:	2201      	movs	r2, #1
 80002e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ea:	486a      	ldr	r0, [pc, #424]	; (8000494 <display7SEG_Horizontal+0x348>)
 80002ec:	f001 f886 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET); //1
 80002f0:	2200      	movs	r2, #0
 80002f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002f6:	4867      	ldr	r0, [pc, #412]	; (8000494 <display7SEG_Horizontal+0x348>)
 80002f8:	f001 f880 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET); //2
 80002fc:	2200      	movs	r2, #0
 80002fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000302:	4864      	ldr	r0, [pc, #400]	; (8000494 <display7SEG_Horizontal+0x348>)
 8000304:	f001 f87a 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, SET); //3
 8000308:	2201      	movs	r2, #1
 800030a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800030e:	4861      	ldr	r0, [pc, #388]	; (8000494 <display7SEG_Horizontal+0x348>)
 8000310:	f001 f874 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET); //4
 8000314:	2201      	movs	r2, #1
 8000316:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800031a:	485e      	ldr	r0, [pc, #376]	; (8000494 <display7SEG_Horizontal+0x348>)
 800031c:	f001 f86e 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, RESET); //5
 8000320:	2200      	movs	r2, #0
 8000322:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000326:	485b      	ldr	r0, [pc, #364]	; (8000494 <display7SEG_Horizontal+0x348>)
 8000328:	f001 f868 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, RESET); //6
 800032c:	2200      	movs	r2, #0
 800032e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000332:	4858      	ldr	r0, [pc, #352]	; (8000494 <display7SEG_Horizontal+0x348>)
 8000334:	f001 f862 	bl	80013fc <HAL_GPIO_WritePin>
		break;
 8000338:	e0d9      	b.n	80004ee <display7SEG_Horizontal+0x3a2>
	case 5:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET); //0
 800033a:	2200      	movs	r2, #0
 800033c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000340:	4854      	ldr	r0, [pc, #336]	; (8000494 <display7SEG_Horizontal+0x348>)
 8000342:	f001 f85b 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET); //1
 8000346:	2201      	movs	r2, #1
 8000348:	f44f 7100 	mov.w	r1, #512	; 0x200
 800034c:	4851      	ldr	r0, [pc, #324]	; (8000494 <display7SEG_Horizontal+0x348>)
 800034e:	f001 f855 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET); //2
 8000352:	2200      	movs	r2, #0
 8000354:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000358:	484e      	ldr	r0, [pc, #312]	; (8000494 <display7SEG_Horizontal+0x348>)
 800035a:	f001 f84f 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, RESET); //3
 800035e:	2200      	movs	r2, #0
 8000360:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000364:	484b      	ldr	r0, [pc, #300]	; (8000494 <display7SEG_Horizontal+0x348>)
 8000366:	f001 f849 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET); //4
 800036a:	2201      	movs	r2, #1
 800036c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000370:	4848      	ldr	r0, [pc, #288]	; (8000494 <display7SEG_Horizontal+0x348>)
 8000372:	f001 f843 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, RESET); //5
 8000376:	2200      	movs	r2, #0
 8000378:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800037c:	4845      	ldr	r0, [pc, #276]	; (8000494 <display7SEG_Horizontal+0x348>)
 800037e:	f001 f83d 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, RESET); //6
 8000382:	2200      	movs	r2, #0
 8000384:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000388:	4842      	ldr	r0, [pc, #264]	; (8000494 <display7SEG_Horizontal+0x348>)
 800038a:	f001 f837 	bl	80013fc <HAL_GPIO_WritePin>
		break;
 800038e:	e0ae      	b.n	80004ee <display7SEG_Horizontal+0x3a2>
	case 6:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET); //0
 8000390:	2200      	movs	r2, #0
 8000392:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000396:	483f      	ldr	r0, [pc, #252]	; (8000494 <display7SEG_Horizontal+0x348>)
 8000398:	f001 f830 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET); //1
 800039c:	2201      	movs	r2, #1
 800039e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003a2:	483c      	ldr	r0, [pc, #240]	; (8000494 <display7SEG_Horizontal+0x348>)
 80003a4:	f001 f82a 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET); //2
 80003a8:	2200      	movs	r2, #0
 80003aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003ae:	4839      	ldr	r0, [pc, #228]	; (8000494 <display7SEG_Horizontal+0x348>)
 80003b0:	f001 f824 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, RESET); //3
 80003b4:	2200      	movs	r2, #0
 80003b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003ba:	4836      	ldr	r0, [pc, #216]	; (8000494 <display7SEG_Horizontal+0x348>)
 80003bc:	f001 f81e 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET); //4
 80003c0:	2200      	movs	r2, #0
 80003c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003c6:	4833      	ldr	r0, [pc, #204]	; (8000494 <display7SEG_Horizontal+0x348>)
 80003c8:	f001 f818 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, RESET); //5
 80003cc:	2200      	movs	r2, #0
 80003ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d2:	4830      	ldr	r0, [pc, #192]	; (8000494 <display7SEG_Horizontal+0x348>)
 80003d4:	f001 f812 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, RESET); //6
 80003d8:	2200      	movs	r2, #0
 80003da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003de:	482d      	ldr	r0, [pc, #180]	; (8000494 <display7SEG_Horizontal+0x348>)
 80003e0:	f001 f80c 	bl	80013fc <HAL_GPIO_WritePin>
		break;
 80003e4:	e083      	b.n	80004ee <display7SEG_Horizontal+0x3a2>
	case 7:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET); //0
 80003e6:	2200      	movs	r2, #0
 80003e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003ec:	4829      	ldr	r0, [pc, #164]	; (8000494 <display7SEG_Horizontal+0x348>)
 80003ee:	f001 f805 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET); //1
 80003f2:	2200      	movs	r2, #0
 80003f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003f8:	4826      	ldr	r0, [pc, #152]	; (8000494 <display7SEG_Horizontal+0x348>)
 80003fa:	f000 ffff 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET); //2
 80003fe:	2200      	movs	r2, #0
 8000400:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000404:	4823      	ldr	r0, [pc, #140]	; (8000494 <display7SEG_Horizontal+0x348>)
 8000406:	f000 fff9 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, SET); //3
 800040a:	2201      	movs	r2, #1
 800040c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000410:	4820      	ldr	r0, [pc, #128]	; (8000494 <display7SEG_Horizontal+0x348>)
 8000412:	f000 fff3 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET); //4
 8000416:	2201      	movs	r2, #1
 8000418:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800041c:	481d      	ldr	r0, [pc, #116]	; (8000494 <display7SEG_Horizontal+0x348>)
 800041e:	f000 ffed 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, SET); //5
 8000422:	2201      	movs	r2, #1
 8000424:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000428:	481a      	ldr	r0, [pc, #104]	; (8000494 <display7SEG_Horizontal+0x348>)
 800042a:	f000 ffe7 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, SET); //6
 800042e:	2201      	movs	r2, #1
 8000430:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000434:	4817      	ldr	r0, [pc, #92]	; (8000494 <display7SEG_Horizontal+0x348>)
 8000436:	f000 ffe1 	bl	80013fc <HAL_GPIO_WritePin>
		break;
 800043a:	e058      	b.n	80004ee <display7SEG_Horizontal+0x3a2>
	case 8:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET); //0
 800043c:	2200      	movs	r2, #0
 800043e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000442:	4814      	ldr	r0, [pc, #80]	; (8000494 <display7SEG_Horizontal+0x348>)
 8000444:	f000 ffda 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET); //1
 8000448:	2200      	movs	r2, #0
 800044a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800044e:	4811      	ldr	r0, [pc, #68]	; (8000494 <display7SEG_Horizontal+0x348>)
 8000450:	f000 ffd4 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET); //2
 8000454:	2200      	movs	r2, #0
 8000456:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800045a:	480e      	ldr	r0, [pc, #56]	; (8000494 <display7SEG_Horizontal+0x348>)
 800045c:	f000 ffce 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, RESET); //3
 8000460:	2200      	movs	r2, #0
 8000462:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000466:	480b      	ldr	r0, [pc, #44]	; (8000494 <display7SEG_Horizontal+0x348>)
 8000468:	f000 ffc8 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET); //4
 800046c:	2200      	movs	r2, #0
 800046e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000472:	4808      	ldr	r0, [pc, #32]	; (8000494 <display7SEG_Horizontal+0x348>)
 8000474:	f000 ffc2 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, RESET); //5
 8000478:	2200      	movs	r2, #0
 800047a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800047e:	4805      	ldr	r0, [pc, #20]	; (8000494 <display7SEG_Horizontal+0x348>)
 8000480:	f000 ffbc 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, RESET); //6
 8000484:	2200      	movs	r2, #0
 8000486:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800048a:	4802      	ldr	r0, [pc, #8]	; (8000494 <display7SEG_Horizontal+0x348>)
 800048c:	f000 ffb6 	bl	80013fc <HAL_GPIO_WritePin>
		break;
 8000490:	e02d      	b.n	80004ee <display7SEG_Horizontal+0x3a2>
 8000492:	bf00      	nop
 8000494:	40010800 	.word	0x40010800
	case 9:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET); //0
 8000498:	2200      	movs	r2, #0
 800049a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800049e:	4816      	ldr	r0, [pc, #88]	; (80004f8 <display7SEG_Horizontal+0x3ac>)
 80004a0:	f000 ffac 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET); //1
 80004a4:	2200      	movs	r2, #0
 80004a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004aa:	4813      	ldr	r0, [pc, #76]	; (80004f8 <display7SEG_Horizontal+0x3ac>)
 80004ac:	f000 ffa6 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET); //2
 80004b0:	2200      	movs	r2, #0
 80004b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004b6:	4810      	ldr	r0, [pc, #64]	; (80004f8 <display7SEG_Horizontal+0x3ac>)
 80004b8:	f000 ffa0 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, RESET); //3
 80004bc:	2200      	movs	r2, #0
 80004be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004c2:	480d      	ldr	r0, [pc, #52]	; (80004f8 <display7SEG_Horizontal+0x3ac>)
 80004c4:	f000 ff9a 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET); //4
 80004c8:	2201      	movs	r2, #1
 80004ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004ce:	480a      	ldr	r0, [pc, #40]	; (80004f8 <display7SEG_Horizontal+0x3ac>)
 80004d0:	f000 ff94 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, RESET); //5
 80004d4:	2200      	movs	r2, #0
 80004d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004da:	4807      	ldr	r0, [pc, #28]	; (80004f8 <display7SEG_Horizontal+0x3ac>)
 80004dc:	f000 ff8e 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, RESET); //6
 80004e0:	2200      	movs	r2, #0
 80004e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004e6:	4804      	ldr	r0, [pc, #16]	; (80004f8 <display7SEG_Horizontal+0x3ac>)
 80004e8:	f000 ff88 	bl	80013fc <HAL_GPIO_WritePin>

		break;
 80004ec:	bf00      	nop
	}
}
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40010800 	.word	0x40010800

080004fc <display7SEG_VERTICAL>:
;
void display7SEG_VERTICAL(int num) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	2b09      	cmp	r3, #9
 8000508:	f200 819e 	bhi.w	8000848 <display7SEG_VERTICAL+0x34c>
 800050c:	a201      	add	r2, pc, #4	; (adr r2, 8000514 <display7SEG_VERTICAL+0x18>)
 800050e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000512:	bf00      	nop
 8000514:	0800053d 	.word	0x0800053d
 8000518:	0800058b 	.word	0x0800058b
 800051c:	080005d9 	.word	0x080005d9
 8000520:	08000627 	.word	0x08000627
 8000524:	08000675 	.word	0x08000675
 8000528:	080006c3 	.word	0x080006c3
 800052c:	08000711 	.word	0x08000711
 8000530:	0800075f 	.word	0x0800075f
 8000534:	080007ad 	.word	0x080007ad
 8000538:	080007fb 	.word	0x080007fb
	switch (num) {
	case 0:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET); //0
 800053c:	2200      	movs	r2, #0
 800053e:	2102      	movs	r1, #2
 8000540:	48c3      	ldr	r0, [pc, #780]	; (8000850 <display7SEG_VERTICAL+0x354>)
 8000542:	f000 ff5b 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, RESET); //1
 8000546:	2200      	movs	r2, #0
 8000548:	2104      	movs	r1, #4
 800054a:	48c1      	ldr	r0, [pc, #772]	; (8000850 <display7SEG_VERTICAL+0x354>)
 800054c:	f000 ff56 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, RESET); //2
 8000550:	2200      	movs	r2, #0
 8000552:	2108      	movs	r1, #8
 8000554:	48be      	ldr	r0, [pc, #760]	; (8000850 <display7SEG_VERTICAL+0x354>)
 8000556:	f000 ff51 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, RESET); //3
 800055a:	2200      	movs	r2, #0
 800055c:	2110      	movs	r1, #16
 800055e:	48bc      	ldr	r0, [pc, #752]	; (8000850 <display7SEG_VERTICAL+0x354>)
 8000560:	f000 ff4c 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET); //4
 8000564:	2200      	movs	r2, #0
 8000566:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800056a:	48ba      	ldr	r0, [pc, #744]	; (8000854 <display7SEG_VERTICAL+0x358>)
 800056c:	f000 ff46 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET); //5
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000576:	48b7      	ldr	r0, [pc, #732]	; (8000854 <display7SEG_VERTICAL+0x358>)
 8000578:	f000 ff40 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET); //6
 800057c:	2201      	movs	r2, #1
 800057e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000582:	48b4      	ldr	r0, [pc, #720]	; (8000854 <display7SEG_VERTICAL+0x358>)
 8000584:	f000 ff3a 	bl	80013fc <HAL_GPIO_WritePin>
		break;
 8000588:	e15e      	b.n	8000848 <display7SEG_VERTICAL+0x34c>
	case 1:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, SET); //0
 800058a:	2201      	movs	r2, #1
 800058c:	2102      	movs	r1, #2
 800058e:	48b0      	ldr	r0, [pc, #704]	; (8000850 <display7SEG_VERTICAL+0x354>)
 8000590:	f000 ff34 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, RESET); //1
 8000594:	2200      	movs	r2, #0
 8000596:	2104      	movs	r1, #4
 8000598:	48ad      	ldr	r0, [pc, #692]	; (8000850 <display7SEG_VERTICAL+0x354>)
 800059a:	f000 ff2f 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, RESET); //2
 800059e:	2200      	movs	r2, #0
 80005a0:	2108      	movs	r1, #8
 80005a2:	48ab      	ldr	r0, [pc, #684]	; (8000850 <display7SEG_VERTICAL+0x354>)
 80005a4:	f000 ff2a 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, SET); //3
 80005a8:	2201      	movs	r2, #1
 80005aa:	2110      	movs	r1, #16
 80005ac:	48a8      	ldr	r0, [pc, #672]	; (8000850 <display7SEG_VERTICAL+0x354>)
 80005ae:	f000 ff25 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET); //4
 80005b2:	2201      	movs	r2, #1
 80005b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b8:	48a6      	ldr	r0, [pc, #664]	; (8000854 <display7SEG_VERTICAL+0x358>)
 80005ba:	f000 ff1f 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET); //5
 80005be:	2201      	movs	r2, #1
 80005c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c4:	48a3      	ldr	r0, [pc, #652]	; (8000854 <display7SEG_VERTICAL+0x358>)
 80005c6:	f000 ff19 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET); //6
 80005ca:	2201      	movs	r2, #1
 80005cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d0:	48a0      	ldr	r0, [pc, #640]	; (8000854 <display7SEG_VERTICAL+0x358>)
 80005d2:	f000 ff13 	bl	80013fc <HAL_GPIO_WritePin>
		break;
 80005d6:	e137      	b.n	8000848 <display7SEG_VERTICAL+0x34c>
	case 2:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET); //0
 80005d8:	2200      	movs	r2, #0
 80005da:	2102      	movs	r1, #2
 80005dc:	489c      	ldr	r0, [pc, #624]	; (8000850 <display7SEG_VERTICAL+0x354>)
 80005de:	f000 ff0d 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, RESET); //1
 80005e2:	2200      	movs	r2, #0
 80005e4:	2104      	movs	r1, #4
 80005e6:	489a      	ldr	r0, [pc, #616]	; (8000850 <display7SEG_VERTICAL+0x354>)
 80005e8:	f000 ff08 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, SET); //2
 80005ec:	2201      	movs	r2, #1
 80005ee:	2108      	movs	r1, #8
 80005f0:	4897      	ldr	r0, [pc, #604]	; (8000850 <display7SEG_VERTICAL+0x354>)
 80005f2:	f000 ff03 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, RESET); //3
 80005f6:	2200      	movs	r2, #0
 80005f8:	2110      	movs	r1, #16
 80005fa:	4895      	ldr	r0, [pc, #596]	; (8000850 <display7SEG_VERTICAL+0x354>)
 80005fc:	f000 fefe 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET); //4
 8000600:	2200      	movs	r2, #0
 8000602:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000606:	4893      	ldr	r0, [pc, #588]	; (8000854 <display7SEG_VERTICAL+0x358>)
 8000608:	f000 fef8 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET); //5
 800060c:	2201      	movs	r2, #1
 800060e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000612:	4890      	ldr	r0, [pc, #576]	; (8000854 <display7SEG_VERTICAL+0x358>)
 8000614:	f000 fef2 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET); //6
 8000618:	2200      	movs	r2, #0
 800061a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800061e:	488d      	ldr	r0, [pc, #564]	; (8000854 <display7SEG_VERTICAL+0x358>)
 8000620:	f000 feec 	bl	80013fc <HAL_GPIO_WritePin>
		break;
 8000624:	e110      	b.n	8000848 <display7SEG_VERTICAL+0x34c>
	case 3:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET); //0
 8000626:	2200      	movs	r2, #0
 8000628:	2102      	movs	r1, #2
 800062a:	4889      	ldr	r0, [pc, #548]	; (8000850 <display7SEG_VERTICAL+0x354>)
 800062c:	f000 fee6 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, RESET); //1
 8000630:	2200      	movs	r2, #0
 8000632:	2104      	movs	r1, #4
 8000634:	4886      	ldr	r0, [pc, #536]	; (8000850 <display7SEG_VERTICAL+0x354>)
 8000636:	f000 fee1 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, RESET); //2
 800063a:	2200      	movs	r2, #0
 800063c:	2108      	movs	r1, #8
 800063e:	4884      	ldr	r0, [pc, #528]	; (8000850 <display7SEG_VERTICAL+0x354>)
 8000640:	f000 fedc 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, RESET); //3
 8000644:	2200      	movs	r2, #0
 8000646:	2110      	movs	r1, #16
 8000648:	4881      	ldr	r0, [pc, #516]	; (8000850 <display7SEG_VERTICAL+0x354>)
 800064a:	f000 fed7 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET); //4
 800064e:	2201      	movs	r2, #1
 8000650:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000654:	487f      	ldr	r0, [pc, #508]	; (8000854 <display7SEG_VERTICAL+0x358>)
 8000656:	f000 fed1 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET); //5
 800065a:	2201      	movs	r2, #1
 800065c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000660:	487c      	ldr	r0, [pc, #496]	; (8000854 <display7SEG_VERTICAL+0x358>)
 8000662:	f000 fecb 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET); //6
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800066c:	4879      	ldr	r0, [pc, #484]	; (8000854 <display7SEG_VERTICAL+0x358>)
 800066e:	f000 fec5 	bl	80013fc <HAL_GPIO_WritePin>
		break;
 8000672:	e0e9      	b.n	8000848 <display7SEG_VERTICAL+0x34c>
	case 4:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, SET); //0
 8000674:	2201      	movs	r2, #1
 8000676:	2102      	movs	r1, #2
 8000678:	4875      	ldr	r0, [pc, #468]	; (8000850 <display7SEG_VERTICAL+0x354>)
 800067a:	f000 febf 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, RESET); //1
 800067e:	2200      	movs	r2, #0
 8000680:	2104      	movs	r1, #4
 8000682:	4873      	ldr	r0, [pc, #460]	; (8000850 <display7SEG_VERTICAL+0x354>)
 8000684:	f000 feba 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, RESET); //2
 8000688:	2200      	movs	r2, #0
 800068a:	2108      	movs	r1, #8
 800068c:	4870      	ldr	r0, [pc, #448]	; (8000850 <display7SEG_VERTICAL+0x354>)
 800068e:	f000 feb5 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, SET); //3
 8000692:	2201      	movs	r2, #1
 8000694:	2110      	movs	r1, #16
 8000696:	486e      	ldr	r0, [pc, #440]	; (8000850 <display7SEG_VERTICAL+0x354>)
 8000698:	f000 feb0 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET); //4
 800069c:	2201      	movs	r2, #1
 800069e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a2:	486c      	ldr	r0, [pc, #432]	; (8000854 <display7SEG_VERTICAL+0x358>)
 80006a4:	f000 feaa 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET); //5
 80006a8:	2200      	movs	r2, #0
 80006aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ae:	4869      	ldr	r0, [pc, #420]	; (8000854 <display7SEG_VERTICAL+0x358>)
 80006b0:	f000 fea4 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET); //6
 80006b4:	2200      	movs	r2, #0
 80006b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006ba:	4866      	ldr	r0, [pc, #408]	; (8000854 <display7SEG_VERTICAL+0x358>)
 80006bc:	f000 fe9e 	bl	80013fc <HAL_GPIO_WritePin>
		break;
 80006c0:	e0c2      	b.n	8000848 <display7SEG_VERTICAL+0x34c>
	case 5:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET); //0
 80006c2:	2200      	movs	r2, #0
 80006c4:	2102      	movs	r1, #2
 80006c6:	4862      	ldr	r0, [pc, #392]	; (8000850 <display7SEG_VERTICAL+0x354>)
 80006c8:	f000 fe98 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, SET); //1
 80006cc:	2201      	movs	r2, #1
 80006ce:	2104      	movs	r1, #4
 80006d0:	485f      	ldr	r0, [pc, #380]	; (8000850 <display7SEG_VERTICAL+0x354>)
 80006d2:	f000 fe93 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, RESET); //2
 80006d6:	2200      	movs	r2, #0
 80006d8:	2108      	movs	r1, #8
 80006da:	485d      	ldr	r0, [pc, #372]	; (8000850 <display7SEG_VERTICAL+0x354>)
 80006dc:	f000 fe8e 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, RESET); //3
 80006e0:	2200      	movs	r2, #0
 80006e2:	2110      	movs	r1, #16
 80006e4:	485a      	ldr	r0, [pc, #360]	; (8000850 <display7SEG_VERTICAL+0x354>)
 80006e6:	f000 fe89 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET); //4
 80006ea:	2201      	movs	r2, #1
 80006ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006f0:	4858      	ldr	r0, [pc, #352]	; (8000854 <display7SEG_VERTICAL+0x358>)
 80006f2:	f000 fe83 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET); //5
 80006f6:	2200      	movs	r2, #0
 80006f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006fc:	4855      	ldr	r0, [pc, #340]	; (8000854 <display7SEG_VERTICAL+0x358>)
 80006fe:	f000 fe7d 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET); //6
 8000702:	2200      	movs	r2, #0
 8000704:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000708:	4852      	ldr	r0, [pc, #328]	; (8000854 <display7SEG_VERTICAL+0x358>)
 800070a:	f000 fe77 	bl	80013fc <HAL_GPIO_WritePin>
		break;
 800070e:	e09b      	b.n	8000848 <display7SEG_VERTICAL+0x34c>
	case 6:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET); //0
 8000710:	2200      	movs	r2, #0
 8000712:	2102      	movs	r1, #2
 8000714:	484e      	ldr	r0, [pc, #312]	; (8000850 <display7SEG_VERTICAL+0x354>)
 8000716:	f000 fe71 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, SET); //1
 800071a:	2201      	movs	r2, #1
 800071c:	2104      	movs	r1, #4
 800071e:	484c      	ldr	r0, [pc, #304]	; (8000850 <display7SEG_VERTICAL+0x354>)
 8000720:	f000 fe6c 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, RESET); //2
 8000724:	2200      	movs	r2, #0
 8000726:	2108      	movs	r1, #8
 8000728:	4849      	ldr	r0, [pc, #292]	; (8000850 <display7SEG_VERTICAL+0x354>)
 800072a:	f000 fe67 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, RESET); //3
 800072e:	2200      	movs	r2, #0
 8000730:	2110      	movs	r1, #16
 8000732:	4847      	ldr	r0, [pc, #284]	; (8000850 <display7SEG_VERTICAL+0x354>)
 8000734:	f000 fe62 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET); //4
 8000738:	2200      	movs	r2, #0
 800073a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800073e:	4845      	ldr	r0, [pc, #276]	; (8000854 <display7SEG_VERTICAL+0x358>)
 8000740:	f000 fe5c 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET); //5
 8000744:	2200      	movs	r2, #0
 8000746:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800074a:	4842      	ldr	r0, [pc, #264]	; (8000854 <display7SEG_VERTICAL+0x358>)
 800074c:	f000 fe56 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET); //6
 8000750:	2200      	movs	r2, #0
 8000752:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000756:	483f      	ldr	r0, [pc, #252]	; (8000854 <display7SEG_VERTICAL+0x358>)
 8000758:	f000 fe50 	bl	80013fc <HAL_GPIO_WritePin>
		break;
 800075c:	e074      	b.n	8000848 <display7SEG_VERTICAL+0x34c>
	case 7:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET); //0
 800075e:	2200      	movs	r2, #0
 8000760:	2102      	movs	r1, #2
 8000762:	483b      	ldr	r0, [pc, #236]	; (8000850 <display7SEG_VERTICAL+0x354>)
 8000764:	f000 fe4a 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, RESET); //1
 8000768:	2200      	movs	r2, #0
 800076a:	2104      	movs	r1, #4
 800076c:	4838      	ldr	r0, [pc, #224]	; (8000850 <display7SEG_VERTICAL+0x354>)
 800076e:	f000 fe45 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, RESET); //2
 8000772:	2200      	movs	r2, #0
 8000774:	2108      	movs	r1, #8
 8000776:	4836      	ldr	r0, [pc, #216]	; (8000850 <display7SEG_VERTICAL+0x354>)
 8000778:	f000 fe40 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, SET); //3
 800077c:	2201      	movs	r2, #1
 800077e:	2110      	movs	r1, #16
 8000780:	4833      	ldr	r0, [pc, #204]	; (8000850 <display7SEG_VERTICAL+0x354>)
 8000782:	f000 fe3b 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET); //4
 8000786:	2201      	movs	r2, #1
 8000788:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800078c:	4831      	ldr	r0, [pc, #196]	; (8000854 <display7SEG_VERTICAL+0x358>)
 800078e:	f000 fe35 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET); //5
 8000792:	2201      	movs	r2, #1
 8000794:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000798:	482e      	ldr	r0, [pc, #184]	; (8000854 <display7SEG_VERTICAL+0x358>)
 800079a:	f000 fe2f 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET); //6
 800079e:	2201      	movs	r2, #1
 80007a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007a4:	482b      	ldr	r0, [pc, #172]	; (8000854 <display7SEG_VERTICAL+0x358>)
 80007a6:	f000 fe29 	bl	80013fc <HAL_GPIO_WritePin>
		break;
 80007aa:	e04d      	b.n	8000848 <display7SEG_VERTICAL+0x34c>
	case 8:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET); //0
 80007ac:	2200      	movs	r2, #0
 80007ae:	2102      	movs	r1, #2
 80007b0:	4827      	ldr	r0, [pc, #156]	; (8000850 <display7SEG_VERTICAL+0x354>)
 80007b2:	f000 fe23 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, RESET); //1
 80007b6:	2200      	movs	r2, #0
 80007b8:	2104      	movs	r1, #4
 80007ba:	4825      	ldr	r0, [pc, #148]	; (8000850 <display7SEG_VERTICAL+0x354>)
 80007bc:	f000 fe1e 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, RESET); //2
 80007c0:	2200      	movs	r2, #0
 80007c2:	2108      	movs	r1, #8
 80007c4:	4822      	ldr	r0, [pc, #136]	; (8000850 <display7SEG_VERTICAL+0x354>)
 80007c6:	f000 fe19 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, RESET); //3
 80007ca:	2200      	movs	r2, #0
 80007cc:	2110      	movs	r1, #16
 80007ce:	4820      	ldr	r0, [pc, #128]	; (8000850 <display7SEG_VERTICAL+0x354>)
 80007d0:	f000 fe14 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET); //4
 80007d4:	2200      	movs	r2, #0
 80007d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007da:	481e      	ldr	r0, [pc, #120]	; (8000854 <display7SEG_VERTICAL+0x358>)
 80007dc:	f000 fe0e 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET); //5
 80007e0:	2200      	movs	r2, #0
 80007e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007e6:	481b      	ldr	r0, [pc, #108]	; (8000854 <display7SEG_VERTICAL+0x358>)
 80007e8:	f000 fe08 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET); //6
 80007ec:	2200      	movs	r2, #0
 80007ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007f2:	4818      	ldr	r0, [pc, #96]	; (8000854 <display7SEG_VERTICAL+0x358>)
 80007f4:	f000 fe02 	bl	80013fc <HAL_GPIO_WritePin>
		break;
 80007f8:	e026      	b.n	8000848 <display7SEG_VERTICAL+0x34c>
	case 9:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET); //0
 80007fa:	2200      	movs	r2, #0
 80007fc:	2102      	movs	r1, #2
 80007fe:	4814      	ldr	r0, [pc, #80]	; (8000850 <display7SEG_VERTICAL+0x354>)
 8000800:	f000 fdfc 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, RESET); //1
 8000804:	2200      	movs	r2, #0
 8000806:	2104      	movs	r1, #4
 8000808:	4811      	ldr	r0, [pc, #68]	; (8000850 <display7SEG_VERTICAL+0x354>)
 800080a:	f000 fdf7 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, RESET); //2
 800080e:	2200      	movs	r2, #0
 8000810:	2108      	movs	r1, #8
 8000812:	480f      	ldr	r0, [pc, #60]	; (8000850 <display7SEG_VERTICAL+0x354>)
 8000814:	f000 fdf2 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, RESET); //3
 8000818:	2200      	movs	r2, #0
 800081a:	2110      	movs	r1, #16
 800081c:	480c      	ldr	r0, [pc, #48]	; (8000850 <display7SEG_VERTICAL+0x354>)
 800081e:	f000 fded 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET); //4
 8000822:	2201      	movs	r2, #1
 8000824:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000828:	480a      	ldr	r0, [pc, #40]	; (8000854 <display7SEG_VERTICAL+0x358>)
 800082a:	f000 fde7 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET); //5
 800082e:	2200      	movs	r2, #0
 8000830:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000834:	4807      	ldr	r0, [pc, #28]	; (8000854 <display7SEG_VERTICAL+0x358>)
 8000836:	f000 fde1 	bl	80013fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET); //6
 800083a:	2200      	movs	r2, #0
 800083c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000840:	4804      	ldr	r0, [pc, #16]	; (8000854 <display7SEG_VERTICAL+0x358>)
 8000842:	f000 fddb 	bl	80013fc <HAL_GPIO_WritePin>

		break;
 8000846:	bf00      	nop
	}
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40010800 	.word	0x40010800
 8000854:	40010c00 	.word	0x40010c00

08000858 <init_exercise5>:
;
void init_exercise5() {
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000862:	4834      	ldr	r0, [pc, #208]	; (8000934 <init_exercise5+0xdc>)
 8000864:	f000 fdca 	bl	80013fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 8000868:	2200      	movs	r2, #0
 800086a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800086e:	4831      	ldr	r0, [pc, #196]	; (8000934 <init_exercise5+0xdc>)
 8000870:	f000 fdc4 	bl	80013fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 8000874:	2200      	movs	r2, #0
 8000876:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800087a:	482e      	ldr	r0, [pc, #184]	; (8000934 <init_exercise5+0xdc>)
 800087c:	f000 fdbe 	bl	80013fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000886:	482b      	ldr	r0, [pc, #172]	; (8000934 <init_exercise5+0xdc>)
 8000888:	f000 fdb8 	bl	80013fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 800088c:	2200      	movs	r2, #0
 800088e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000892:	4828      	ldr	r0, [pc, #160]	; (8000934 <init_exercise5+0xdc>)
 8000894:	f000 fdb2 	bl	80013fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800089e:	4825      	ldr	r0, [pc, #148]	; (8000934 <init_exercise5+0xdc>)
 80008a0:	f000 fdac 	bl	80013fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, RESET);
 80008a4:	2200      	movs	r2, #0
 80008a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008aa:	4822      	ldr	r0, [pc, #136]	; (8000934 <init_exercise5+0xdc>)
 80008ac:	f000 fda6 	bl	80013fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2101      	movs	r1, #1
 80008b4:	4820      	ldr	r0, [pc, #128]	; (8000938 <init_exercise5+0xe0>)
 80008b6:	f000 fda1 	bl	80013fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2102      	movs	r1, #2
 80008be:	481e      	ldr	r0, [pc, #120]	; (8000938 <init_exercise5+0xe0>)
 80008c0:	f000 fd9c 	bl	80013fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2104      	movs	r1, #4
 80008c8:	481b      	ldr	r0, [pc, #108]	; (8000938 <init_exercise5+0xe0>)
 80008ca:	f000 fd97 	bl	80013fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2108      	movs	r1, #8
 80008d2:	4819      	ldr	r0, [pc, #100]	; (8000938 <init_exercise5+0xe0>)
 80008d4:	f000 fd92 	bl	80013fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 80008d8:	2200      	movs	r2, #0
 80008da:	2110      	movs	r1, #16
 80008dc:	4816      	ldr	r0, [pc, #88]	; (8000938 <init_exercise5+0xe0>)
 80008de:	f000 fd8d 	bl	80013fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2120      	movs	r1, #32
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <init_exercise5+0xe0>)
 80008e8:	f000 fd88 	bl	80013fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2140      	movs	r1, #64	; 0x40
 80008f0:	4811      	ldr	r0, [pc, #68]	; (8000938 <init_exercise5+0xe0>)
 80008f2:	f000 fd83 	bl	80013fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2180      	movs	r1, #128	; 0x80
 80008fa:	480f      	ldr	r0, [pc, #60]	; (8000938 <init_exercise5+0xe0>)
 80008fc:	f000 fd7e 	bl	80013fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000906:	480c      	ldr	r0, [pc, #48]	; (8000938 <init_exercise5+0xe0>)
 8000908:	f000 fd78 	bl	80013fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000912:	4809      	ldr	r0, [pc, #36]	; (8000938 <init_exercise5+0xe0>)
 8000914:	f000 fd72 	bl	80013fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <init_exercise5+0xe0>)
 8000920:	f000 fd6c 	bl	80013fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, RESET);
 8000924:	2200      	movs	r2, #0
 8000926:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800092a:	4803      	ldr	r0, [pc, #12]	; (8000938 <init_exercise5+0xe0>)
 800092c:	f000 fd66 	bl	80013fc <HAL_GPIO_WritePin>
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40010800 	.word	0x40010800
 8000938:	40010c00 	.word	0x40010c00

0800093c <exercise5_run>:
void exercise5_run() {
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	switch (current_WayState) {
 8000940:	4b9f      	ldr	r3, [pc, #636]	; (8000bc0 <exercise5_run+0x284>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d003      	beq.n	8000950 <exercise5_run+0x14>
 8000948:	2b01      	cmp	r3, #1
 800094a:	f000 809a 	beq.w	8000a82 <exercise5_run+0x146>
			}
		}
		break;

	}
}
 800094e:	e135      	b.n	8000bbc <exercise5_run+0x280>
		display7SEG_Horizontal(countTimeHorizontal--);
 8000950:	4b9c      	ldr	r3, [pc, #624]	; (8000bc4 <exercise5_run+0x288>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	1e5a      	subs	r2, r3, #1
 8000956:	499b      	ldr	r1, [pc, #620]	; (8000bc4 <exercise5_run+0x288>)
 8000958:	600a      	str	r2, [r1, #0]
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff fbf6 	bl	800014c <display7SEG_Horizontal>
		display7SEG_VERTICAL(countTimeVertical--);
 8000960:	4b99      	ldr	r3, [pc, #612]	; (8000bc8 <exercise5_run+0x28c>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	1e5a      	subs	r2, r3, #1
 8000966:	4998      	ldr	r1, [pc, #608]	; (8000bc8 <exercise5_run+0x28c>)
 8000968:	600a      	str	r2, [r1, #0]
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff fdc6 	bl	80004fc <display7SEG_VERTICAL>
		if (countTimeHorizontal >= 0) {
 8000970:	4b94      	ldr	r3, [pc, #592]	; (8000bc4 <exercise5_run+0x288>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	f2c0 811e 	blt.w	8000bb6 <exercise5_run+0x27a>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 800097a:	2201      	movs	r2, #1
 800097c:	2102      	movs	r1, #2
 800097e:	4893      	ldr	r0, [pc, #588]	; (8000bcc <exercise5_run+0x290>)
 8000980:	f000 fd3c 	bl	80013fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, SET);
 8000984:	2201      	movs	r2, #1
 8000986:	2180      	movs	r1, #128	; 0x80
 8000988:	4890      	ldr	r0, [pc, #576]	; (8000bcc <exercise5_run+0x290>)
 800098a:	f000 fd37 	bl	80013fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000994:	488d      	ldr	r0, [pc, #564]	; (8000bcc <exercise5_run+0x290>)
 8000996:	f000 fd31 	bl	80013fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	2110      	movs	r1, #16
 800099e:	488b      	ldr	r0, [pc, #556]	; (8000bcc <exercise5_run+0x290>)
 80009a0:	f000 fd2c 	bl	80013fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009aa:	4888      	ldr	r0, [pc, #544]	; (8000bcc <exercise5_run+0x290>)
 80009ac:	f000 fd26 	bl	80013fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2104      	movs	r1, #4
 80009b4:	4885      	ldr	r0, [pc, #532]	; (8000bcc <exercise5_run+0x290>)
 80009b6:	f000 fd21 	bl	80013fc <HAL_GPIO_WritePin>
			switch (current_LEDStateVertical) {
 80009ba:	4b85      	ldr	r3, [pc, #532]	; (8000bd0 <exercise5_run+0x294>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2b02      	cmp	r3, #2
 80009c0:	d006      	beq.n	80009d0 <exercise5_run+0x94>
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	dc51      	bgt.n	8000a6a <exercise5_run+0x12e>
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d04a      	beq.n	8000a60 <exercise5_run+0x124>
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d024      	beq.n	8000a18 <exercise5_run+0xdc>
 80009ce:	e04c      	b.n	8000a6a <exercise5_run+0x12e>
				if (countTimeVertical >= 0) {
 80009d0:	4b7d      	ldr	r3, [pc, #500]	; (8000bc8 <exercise5_run+0x28c>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	db45      	blt.n	8000a64 <exercise5_run+0x128>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 80009d8:	2201      	movs	r2, #1
 80009da:	2101      	movs	r1, #1
 80009dc:	487b      	ldr	r0, [pc, #492]	; (8000bcc <exercise5_run+0x290>)
 80009de:	f000 fd0d 	bl	80013fc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 80009e2:	2201      	movs	r2, #1
 80009e4:	2140      	movs	r1, #64	; 0x40
 80009e6:	4879      	ldr	r0, [pc, #484]	; (8000bcc <exercise5_run+0x290>)
 80009e8:	f000 fd08 	bl	80013fc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009f2:	4876      	ldr	r0, [pc, #472]	; (8000bcc <exercise5_run+0x290>)
 80009f4:	f000 fd02 	bl	80013fc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2120      	movs	r1, #32
 80009fc:	4873      	ldr	r0, [pc, #460]	; (8000bcc <exercise5_run+0x290>)
 80009fe:	f000 fcfd 	bl	80013fc <HAL_GPIO_WritePin>
					if (countTimeVertical == 0) {
 8000a02:	4b71      	ldr	r3, [pc, #452]	; (8000bc8 <exercise5_run+0x28c>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d12c      	bne.n	8000a64 <exercise5_run+0x128>
						countTimeVertical = 2;
 8000a0a:	4b6f      	ldr	r3, [pc, #444]	; (8000bc8 <exercise5_run+0x28c>)
 8000a0c:	2202      	movs	r2, #2
 8000a0e:	601a      	str	r2, [r3, #0]
						current_LEDStateVertical = yellowvertical_state;
 8000a10:	4b6f      	ldr	r3, [pc, #444]	; (8000bd0 <exercise5_run+0x294>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	701a      	strb	r2, [r3, #0]
				break;
 8000a16:	e025      	b.n	8000a64 <exercise5_run+0x128>
				if (countTimeVertical >= 0) {
 8000a18:	4b6b      	ldr	r3, [pc, #428]	; (8000bc8 <exercise5_run+0x28c>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	db23      	blt.n	8000a68 <exercise5_run+0x12c>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET);
 8000a20:	2201      	movs	r2, #1
 8000a22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a26:	4869      	ldr	r0, [pc, #420]	; (8000bcc <exercise5_run+0x290>)
 8000a28:	f000 fce8 	bl	80013fc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	2120      	movs	r1, #32
 8000a30:	4866      	ldr	r0, [pc, #408]	; (8000bcc <exercise5_run+0x290>)
 8000a32:	f000 fce3 	bl	80013fc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2101      	movs	r1, #1
 8000a3a:	4864      	ldr	r0, [pc, #400]	; (8000bcc <exercise5_run+0x290>)
 8000a3c:	f000 fcde 	bl	80013fc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2140      	movs	r1, #64	; 0x40
 8000a44:	4861      	ldr	r0, [pc, #388]	; (8000bcc <exercise5_run+0x290>)
 8000a46:	f000 fcd9 	bl	80013fc <HAL_GPIO_WritePin>
					if (countTimeVertical == 0) {
 8000a4a:	4b5f      	ldr	r3, [pc, #380]	; (8000bc8 <exercise5_run+0x28c>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d10a      	bne.n	8000a68 <exercise5_run+0x12c>
						countTimeVertical = 5;
 8000a52:	4b5d      	ldr	r3, [pc, #372]	; (8000bc8 <exercise5_run+0x28c>)
 8000a54:	2205      	movs	r2, #5
 8000a56:	601a      	str	r2, [r3, #0]
						current_LEDStateVertical = greenvertical_state;
 8000a58:	4b5d      	ldr	r3, [pc, #372]	; (8000bd0 <exercise5_run+0x294>)
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	701a      	strb	r2, [r3, #0]
				break;
 8000a5e:	e003      	b.n	8000a68 <exercise5_run+0x12c>
				break;
 8000a60:	bf00      	nop
 8000a62:	e002      	b.n	8000a6a <exercise5_run+0x12e>
				break;
 8000a64:	bf00      	nop
 8000a66:	e000      	b.n	8000a6a <exercise5_run+0x12e>
				break;
 8000a68:	bf00      	nop
			if (countTimeHorizontal == 0) {
 8000a6a:	4b56      	ldr	r3, [pc, #344]	; (8000bc4 <exercise5_run+0x288>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	f040 80a1 	bne.w	8000bb6 <exercise5_run+0x27a>
				countTimeHorizontal = 3;
 8000a74:	4b53      	ldr	r3, [pc, #332]	; (8000bc4 <exercise5_run+0x288>)
 8000a76:	2203      	movs	r2, #3
 8000a78:	601a      	str	r2, [r3, #0]
				current_WayState = vertical_state;
 8000a7a:	4b51      	ldr	r3, [pc, #324]	; (8000bc0 <exercise5_run+0x284>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	701a      	strb	r2, [r3, #0]
		break;
 8000a80:	e099      	b.n	8000bb6 <exercise5_run+0x27a>
		display7SEG_Horizontal(countTimeHorizontal--);
 8000a82:	4b50      	ldr	r3, [pc, #320]	; (8000bc4 <exercise5_run+0x288>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	1e5a      	subs	r2, r3, #1
 8000a88:	494e      	ldr	r1, [pc, #312]	; (8000bc4 <exercise5_run+0x288>)
 8000a8a:	600a      	str	r2, [r1, #0]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fb5d 	bl	800014c <display7SEG_Horizontal>
		display7SEG_VERTICAL(countTimeVertical--);
 8000a92:	4b4d      	ldr	r3, [pc, #308]	; (8000bc8 <exercise5_run+0x28c>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	1e5a      	subs	r2, r3, #1
 8000a98:	494b      	ldr	r1, [pc, #300]	; (8000bc8 <exercise5_run+0x28c>)
 8000a9a:	600a      	str	r2, [r1, #0]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fd2d 	bl	80004fc <display7SEG_VERTICAL>
		if (countTimeVertical >= 0) {
 8000aa2:	4b49      	ldr	r3, [pc, #292]	; (8000bc8 <exercise5_run+0x28c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	f2c0 8087 	blt.w	8000bba <exercise5_run+0x27e>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2102      	movs	r1, #2
 8000ab0:	4846      	ldr	r0, [pc, #280]	; (8000bcc <exercise5_run+0x290>)
 8000ab2:	f000 fca3 	bl	80013fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2180      	movs	r1, #128	; 0x80
 8000aba:	4844      	ldr	r0, [pc, #272]	; (8000bcc <exercise5_run+0x290>)
 8000abc:	f000 fc9e 	bl	80013fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ac6:	4841      	ldr	r0, [pc, #260]	; (8000bcc <exercise5_run+0x290>)
 8000ac8:	f000 fc98 	bl	80013fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2120      	movs	r1, #32
 8000ad0:	483e      	ldr	r0, [pc, #248]	; (8000bcc <exercise5_run+0x290>)
 8000ad2:	f000 fc93 	bl	80013fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000adc:	483b      	ldr	r0, [pc, #236]	; (8000bcc <exercise5_run+0x290>)
 8000ade:	f000 fc8d 	bl	80013fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	2110      	movs	r1, #16
 8000ae6:	4839      	ldr	r0, [pc, #228]	; (8000bcc <exercise5_run+0x290>)
 8000ae8:	f000 fc88 	bl	80013fc <HAL_GPIO_WritePin>
			switch (current_LEDStateHorizontal) {
 8000aec:	4b39      	ldr	r3, [pc, #228]	; (8000bd4 <exercise5_run+0x298>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	d006      	beq.n	8000b02 <exercise5_run+0x1c6>
 8000af4:	2b02      	cmp	r3, #2
 8000af6:	dc53      	bgt.n	8000ba0 <exercise5_run+0x264>
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d04c      	beq.n	8000b96 <exercise5_run+0x25a>
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d025      	beq.n	8000b4c <exercise5_run+0x210>
 8000b00:	e04e      	b.n	8000ba0 <exercise5_run+0x264>
				if (countTimeHorizontal >= 0) {
 8000b02:	4b30      	ldr	r3, [pc, #192]	; (8000bc4 <exercise5_run+0x288>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	db47      	blt.n	8000b9a <exercise5_run+0x25e>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, SET);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b10:	482e      	ldr	r0, [pc, #184]	; (8000bcc <exercise5_run+0x290>)
 8000b12:	f000 fc73 	bl	80013fc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8000b16:	2201      	movs	r2, #1
 8000b18:	2108      	movs	r1, #8
 8000b1a:	482c      	ldr	r0, [pc, #176]	; (8000bcc <exercise5_run+0x290>)
 8000b1c:	f000 fc6e 	bl	80013fc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b26:	4829      	ldr	r0, [pc, #164]	; (8000bcc <exercise5_run+0x290>)
 8000b28:	f000 fc68 	bl	80013fc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2104      	movs	r1, #4
 8000b30:	4826      	ldr	r0, [pc, #152]	; (8000bcc <exercise5_run+0x290>)
 8000b32:	f000 fc63 	bl	80013fc <HAL_GPIO_WritePin>
					if (countTimeHorizontal == 0) {
 8000b36:	4b23      	ldr	r3, [pc, #140]	; (8000bc4 <exercise5_run+0x288>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d12d      	bne.n	8000b9a <exercise5_run+0x25e>
						countTimeHorizontal = 2;
 8000b3e:	4b21      	ldr	r3, [pc, #132]	; (8000bc4 <exercise5_run+0x288>)
 8000b40:	2202      	movs	r2, #2
 8000b42:	601a      	str	r2, [r3, #0]
						current_LEDStateHorizontal = yellowhorizontal_state;
 8000b44:	4b23      	ldr	r3, [pc, #140]	; (8000bd4 <exercise5_run+0x298>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	701a      	strb	r2, [r3, #0]
				break;
 8000b4a:	e026      	b.n	8000b9a <exercise5_run+0x25e>
				if (countTimeHorizontal >= 0) {
 8000b4c:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <exercise5_run+0x288>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	db24      	blt.n	8000b9e <exercise5_run+0x262>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, SET);
 8000b54:	2201      	movs	r2, #1
 8000b56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b5a:	481c      	ldr	r0, [pc, #112]	; (8000bcc <exercise5_run+0x290>)
 8000b5c:	f000 fc4e 	bl	80013fc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, SET);
 8000b60:	2201      	movs	r2, #1
 8000b62:	2104      	movs	r1, #4
 8000b64:	4819      	ldr	r0, [pc, #100]	; (8000bcc <exercise5_run+0x290>)
 8000b66:	f000 fc49 	bl	80013fc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b70:	4816      	ldr	r0, [pc, #88]	; (8000bcc <exercise5_run+0x290>)
 8000b72:	f000 fc43 	bl	80013fc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2108      	movs	r1, #8
 8000b7a:	4814      	ldr	r0, [pc, #80]	; (8000bcc <exercise5_run+0x290>)
 8000b7c:	f000 fc3e 	bl	80013fc <HAL_GPIO_WritePin>
					if (countTimeHorizontal == 0) {
 8000b80:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <exercise5_run+0x288>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d10a      	bne.n	8000b9e <exercise5_run+0x262>
						countTimeHorizontal = 5;
 8000b88:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <exercise5_run+0x288>)
 8000b8a:	2205      	movs	r2, #5
 8000b8c:	601a      	str	r2, [r3, #0]
						current_LEDStateHorizontal = greenhorizontal_state;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <exercise5_run+0x298>)
 8000b90:	2202      	movs	r2, #2
 8000b92:	701a      	strb	r2, [r3, #0]
				break;
 8000b94:	e003      	b.n	8000b9e <exercise5_run+0x262>
				break;
 8000b96:	bf00      	nop
 8000b98:	e002      	b.n	8000ba0 <exercise5_run+0x264>
				break;
 8000b9a:	bf00      	nop
 8000b9c:	e000      	b.n	8000ba0 <exercise5_run+0x264>
				break;
 8000b9e:	bf00      	nop
			if (countTimeVertical == 0) {
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <exercise5_run+0x28c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d108      	bne.n	8000bba <exercise5_run+0x27e>
				countTimeVertical = 3;
 8000ba8:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <exercise5_run+0x28c>)
 8000baa:	2203      	movs	r2, #3
 8000bac:	601a      	str	r2, [r3, #0]
				current_WayState = horizontal_state;
 8000bae:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <exercise5_run+0x284>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	701a      	strb	r2, [r3, #0]
		break;
 8000bb4:	e001      	b.n	8000bba <exercise5_run+0x27e>
		break;
 8000bb6:	bf00      	nop
 8000bb8:	e000      	b.n	8000bbc <exercise5_run+0x280>
		break;
 8000bba:	bf00      	nop
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000034 	.word	0x20000034
 8000bc4:	20000004 	.word	0x20000004
 8000bc8:	20000008 	.word	0x20000008
 8000bcc:	40010c00 	.word	0x40010c00
 8000bd0:	20000001 	.word	0x20000001
 8000bd4:	20000000 	.word	0x20000000

08000bd8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */

int main(void) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000bdc:	f000 f92a 	bl	8000e34 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000be0:	f000 f80b 	bl	8000bfa <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000be4:	f000 f844 	bl	8000c70 <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */
	init_exercise5();
 8000be8:	f7ff fe36 	bl	8000858 <init_exercise5>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		exercise5_run();
 8000bec:	f7ff fea6 	bl	800093c <exercise5_run>
		/* USER CODE BEGIN 3 */
		HAL_Delay(1000);
 8000bf0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bf4:	f000 f980 	bl	8000ef8 <HAL_Delay>
		exercise5_run();
 8000bf8:	e7f8      	b.n	8000bec <main+0x14>

08000bfa <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b090      	sub	sp, #64	; 0x40
 8000bfe:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c00:	f107 0318 	add.w	r3, r7, #24
 8000c04:	2228      	movs	r2, #40	; 0x28
 8000c06:	2100      	movs	r1, #0
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f001 f80f 	bl	8001c2c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c20:	2301      	movs	r3, #1
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c24:	2310      	movs	r3, #16
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000c2c:	f107 0318 	add.w	r3, r7, #24
 8000c30:	4618      	mov	r0, r3
 8000c32:	f000 fbfb 	bl	800142c <HAL_RCC_OscConfig>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <SystemClock_Config+0x46>
		Error_Handler();
 8000c3c:	f000 f86e 	bl	8000d1c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000c40:	230f      	movs	r3, #15
 8000c42:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c44:	2300      	movs	r3, #0
 8000c46:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	2100      	movs	r1, #0
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f000 fe67 	bl	800192c <HAL_RCC_ClockConfig>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <SystemClock_Config+0x6e>
		Error_Handler();
 8000c64:	f000 f85a 	bl	8000d1c <Error_Handler>
	}
}
 8000c68:	bf00      	nop
 8000c6a:	3740      	adds	r7, #64	; 0x40
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000c76:	f107 0308 	add.w	r3, r7, #8
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c84:	4b22      	ldr	r3, [pc, #136]	; (8000d10 <MX_GPIO_Init+0xa0>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	4a21      	ldr	r2, [pc, #132]	; (8000d10 <MX_GPIO_Init+0xa0>)
 8000c8a:	f043 0304 	orr.w	r3, r3, #4
 8000c8e:	6193      	str	r3, [r2, #24]
 8000c90:	4b1f      	ldr	r3, [pc, #124]	; (8000d10 <MX_GPIO_Init+0xa0>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	f003 0304 	and.w	r3, r3, #4
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9c:	4b1c      	ldr	r3, [pc, #112]	; (8000d10 <MX_GPIO_Init+0xa0>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	4a1b      	ldr	r2, [pc, #108]	; (8000d10 <MX_GPIO_Init+0xa0>)
 8000ca2:	f043 0308 	orr.w	r3, r3, #8
 8000ca6:	6193      	str	r3, [r2, #24]
 8000ca8:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <MX_GPIO_Init+0xa0>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	f003 0308 	and.w	r3, r3, #8
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f647 711e 	movw	r1, #32542	; 0x7f1e
 8000cba:	4816      	ldr	r0, [pc, #88]	; (8000d14 <MX_GPIO_Init+0xa4>)
 8000cbc:	f000 fb9e 	bl	80013fc <HAL_GPIO_WritePin>
			SEG_0Ver_Pin | SEG_1Ver_Pin | SEG_2Ver_Pin | SEG_3Ver_Pin
					| SEG_0_Pin | SEG_1_Pin | SEG_2_Pin | SEG_3_Pin | SEG_4_Pin
					| SEG_5_Pin | SEG_6_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8000cc6:	4814      	ldr	r0, [pc, #80]	; (8000d18 <MX_GPIO_Init+0xa8>)
 8000cc8:	f000 fb98 	bl	80013fc <HAL_GPIO_WritePin>
					| LED_10_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : SEG_0Ver_Pin SEG_1Ver_Pin SEG_2Ver_Pin SEG_3Ver_Pin
	 SEG_0_Pin SEG_1_Pin SEG_2_Pin SEG_3_Pin
	 SEG_4_Pin SEG_5_Pin SEG_6_Pin */
	GPIO_InitStruct.Pin = SEG_0Ver_Pin | SEG_1Ver_Pin | SEG_2Ver_Pin
 8000ccc:	f647 731e 	movw	r3, #32542	; 0x7f1e
 8000cd0:	60bb      	str	r3, [r7, #8]
			| SEG_3Ver_Pin | SEG_0_Pin | SEG_1_Pin | SEG_2_Pin | SEG_3_Pin
			| SEG_4_Pin | SEG_5_Pin | SEG_6_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cde:	f107 0308 	add.w	r3, r7, #8
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	480b      	ldr	r0, [pc, #44]	; (8000d14 <MX_GPIO_Init+0xa4>)
 8000ce6:	f000 fa0f 	bl	8001108 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin LED_11_Pin
	 LED_12_Pin SEG_4Ver_Pin SEG_5Ver_Pin SEG_6Ver_Pin
	 LED_4_Pin LED_5_Pin LED_6_Pin LED_7_Pin
	 LED_8_Pin LED_9_Pin LED_10_Pin */
	GPIO_InitStruct.Pin = LED_1_Pin | LED_2_Pin | LED_3_Pin | LED_11_Pin
 8000cea:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000cee:	60bb      	str	r3, [r7, #8]
			| LED_12_Pin | SEG_4Ver_Pin | SEG_5Ver_Pin | SEG_6Ver_Pin
			| LED_4_Pin | LED_5_Pin | LED_6_Pin | LED_7_Pin | LED_8_Pin
			| LED_9_Pin | LED_10_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfc:	f107 0308 	add.w	r3, r7, #8
 8000d00:	4619      	mov	r1, r3
 8000d02:	4805      	ldr	r0, [pc, #20]	; (8000d18 <MX_GPIO_Init+0xa8>)
 8000d04:	f000 fa00 	bl	8001108 <HAL_GPIO_Init>

}
 8000d08:	bf00      	nop
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40021000 	.word	0x40021000
 8000d14:	40010800 	.word	0x40010800
 8000d18:	40010c00 	.word	0x40010c00

08000d1c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d20:	b672      	cpsid	i
}
 8000d22:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d24:	e7fe      	b.n	8000d24 <Error_Handler+0x8>
	...

08000d28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <HAL_MspInit+0x5c>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <HAL_MspInit+0x5c>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6193      	str	r3, [r2, #24]
 8000d3a:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <HAL_MspInit+0x5c>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d46:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <HAL_MspInit+0x5c>)
 8000d48:	69db      	ldr	r3, [r3, #28]
 8000d4a:	4a0e      	ldr	r2, [pc, #56]	; (8000d84 <HAL_MspInit+0x5c>)
 8000d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d50:	61d3      	str	r3, [r2, #28]
 8000d52:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <HAL_MspInit+0x5c>)
 8000d54:	69db      	ldr	r3, [r3, #28]
 8000d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <HAL_MspInit+0x60>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <HAL_MspInit+0x60>)
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr
 8000d84:	40021000 	.word	0x40021000
 8000d88:	40010000 	.word	0x40010000

08000d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <NMI_Handler+0x4>

08000d92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <HardFault_Handler+0x4>

08000d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <MemManage_Handler+0x4>

08000d9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <BusFault_Handler+0x4>

08000da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <UsageFault_Handler+0x4>

08000daa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr

08000db6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr

08000dc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr

08000dce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd2:	f000 f875 	bl	8000ec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr
	...

08000de8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000de8:	f7ff fff7 	bl	8000dda <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dec:	480b      	ldr	r0, [pc, #44]	; (8000e1c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000dee:	490c      	ldr	r1, [pc, #48]	; (8000e20 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000df0:	4a0c      	ldr	r2, [pc, #48]	; (8000e24 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df4:	e002      	b.n	8000dfc <LoopCopyDataInit>

08000df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfa:	3304      	adds	r3, #4

08000dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e00:	d3f9      	bcc.n	8000df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e02:	4a09      	ldr	r2, [pc, #36]	; (8000e28 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e04:	4c09      	ldr	r4, [pc, #36]	; (8000e2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e08:	e001      	b.n	8000e0e <LoopFillZerobss>

08000e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e0c:	3204      	adds	r2, #4

08000e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e10:	d3fb      	bcc.n	8000e0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e12:	f000 fee7 	bl	8001be4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e16:	f7ff fedf 	bl	8000bd8 <main>
  bx lr
 8000e1a:	4770      	bx	lr
  ldr r0, =_sdata
 8000e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e20:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000e24:	08001c80 	.word	0x08001c80
  ldr r2, =_sbss
 8000e28:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000e2c:	2000003c 	.word	0x2000003c

08000e30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e30:	e7fe      	b.n	8000e30 <ADC1_2_IRQHandler>
	...

08000e34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e38:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <HAL_Init+0x28>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a07      	ldr	r2, [pc, #28]	; (8000e5c <HAL_Init+0x28>)
 8000e3e:	f043 0310 	orr.w	r3, r3, #16
 8000e42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e44:	2003      	movs	r0, #3
 8000e46:	f000 f92b 	bl	80010a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e4a:	200f      	movs	r0, #15
 8000e4c:	f000 f808 	bl	8000e60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e50:	f7ff ff6a 	bl	8000d28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40022000 	.word	0x40022000

08000e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <HAL_InitTick+0x54>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <HAL_InitTick+0x58>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	4619      	mov	r1, r3
 8000e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 f935 	bl	80010ee <HAL_SYSTICK_Config>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e00e      	b.n	8000eac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b0f      	cmp	r3, #15
 8000e92:	d80a      	bhi.n	8000eaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e94:	2200      	movs	r2, #0
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9c:	f000 f90b 	bl	80010b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea0:	4a06      	ldr	r2, [pc, #24]	; (8000ebc <HAL_InitTick+0x5c>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	e000      	b.n	8000eac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	2000000c 	.word	0x2000000c
 8000eb8:	20000014 	.word	0x20000014
 8000ebc:	20000010 	.word	0x20000010

08000ec0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec4:	4b05      	ldr	r3, [pc, #20]	; (8000edc <HAL_IncTick+0x1c>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <HAL_IncTick+0x20>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4413      	add	r3, r2
 8000ed0:	4a03      	ldr	r2, [pc, #12]	; (8000ee0 <HAL_IncTick+0x20>)
 8000ed2:	6013      	str	r3, [r2, #0]
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr
 8000edc:	20000014 	.word	0x20000014
 8000ee0:	20000038 	.word	0x20000038

08000ee4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee8:	4b02      	ldr	r3, [pc, #8]	; (8000ef4 <HAL_GetTick+0x10>)
 8000eea:	681b      	ldr	r3, [r3, #0]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr
 8000ef4:	20000038 	.word	0x20000038

08000ef8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f00:	f7ff fff0 	bl	8000ee4 <HAL_GetTick>
 8000f04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f10:	d005      	beq.n	8000f1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f12:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <HAL_Delay+0x44>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	461a      	mov	r2, r3
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f1e:	bf00      	nop
 8000f20:	f7ff ffe0 	bl	8000ee4 <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d8f7      	bhi.n	8000f20 <HAL_Delay+0x28>
  {
  }
}
 8000f30:	bf00      	nop
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000014 	.word	0x20000014

08000f40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <__NVIC_SetPriorityGrouping+0x44>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f56:	68ba      	ldr	r2, [r7, #8]
 8000f58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f72:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <__NVIC_SetPriorityGrouping+0x44>)
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	60d3      	str	r3, [r2, #12]
}
 8000f78:	bf00      	nop
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f8c:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	0a1b      	lsrs	r3, r3, #8
 8000f92:	f003 0307 	and.w	r3, r3, #7
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	6039      	str	r1, [r7, #0]
 8000fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	db0a      	blt.n	8000fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	490c      	ldr	r1, [pc, #48]	; (8000ff0 <__NVIC_SetPriority+0x4c>)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	0112      	lsls	r2, r2, #4
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fcc:	e00a      	b.n	8000fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4908      	ldr	r1, [pc, #32]	; (8000ff4 <__NVIC_SetPriority+0x50>)
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	f003 030f 	and.w	r3, r3, #15
 8000fda:	3b04      	subs	r3, #4
 8000fdc:	0112      	lsls	r2, r2, #4
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	761a      	strb	r2, [r3, #24]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	e000e100 	.word	0xe000e100
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b089      	sub	sp, #36	; 0x24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f1c3 0307 	rsb	r3, r3, #7
 8001012:	2b04      	cmp	r3, #4
 8001014:	bf28      	it	cs
 8001016:	2304      	movcs	r3, #4
 8001018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3304      	adds	r3, #4
 800101e:	2b06      	cmp	r3, #6
 8001020:	d902      	bls.n	8001028 <NVIC_EncodePriority+0x30>
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3b03      	subs	r3, #3
 8001026:	e000      	b.n	800102a <NVIC_EncodePriority+0x32>
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	f04f 32ff 	mov.w	r2, #4294967295
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43da      	mvns	r2, r3
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	401a      	ands	r2, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001040:	f04f 31ff 	mov.w	r1, #4294967295
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	43d9      	mvns	r1, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	4313      	orrs	r3, r2
         );
}
 8001052:	4618      	mov	r0, r3
 8001054:	3724      	adds	r7, #36	; 0x24
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr

0800105c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800106c:	d301      	bcc.n	8001072 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800106e:	2301      	movs	r3, #1
 8001070:	e00f      	b.n	8001092 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001072:	4a0a      	ldr	r2, [pc, #40]	; (800109c <SysTick_Config+0x40>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3b01      	subs	r3, #1
 8001078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800107a:	210f      	movs	r1, #15
 800107c:	f04f 30ff 	mov.w	r0, #4294967295
 8001080:	f7ff ff90 	bl	8000fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001084:	4b05      	ldr	r3, [pc, #20]	; (800109c <SysTick_Config+0x40>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108a:	4b04      	ldr	r3, [pc, #16]	; (800109c <SysTick_Config+0x40>)
 800108c:	2207      	movs	r2, #7
 800108e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	e000e010 	.word	0xe000e010

080010a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ff49 	bl	8000f40 <__NVIC_SetPriorityGrouping>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b086      	sub	sp, #24
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	4603      	mov	r3, r0
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
 80010c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c8:	f7ff ff5e 	bl	8000f88 <__NVIC_GetPriorityGrouping>
 80010cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	68b9      	ldr	r1, [r7, #8]
 80010d2:	6978      	ldr	r0, [r7, #20]
 80010d4:	f7ff ff90 	bl	8000ff8 <NVIC_EncodePriority>
 80010d8:	4602      	mov	r2, r0
 80010da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010de:	4611      	mov	r1, r2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff5f 	bl	8000fa4 <__NVIC_SetPriority>
}
 80010e6:	bf00      	nop
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff ffb0 	bl	800105c <SysTick_Config>
 80010fc:	4603      	mov	r3, r0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001108:	b480      	push	{r7}
 800110a:	b08b      	sub	sp, #44	; 0x2c
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001112:	2300      	movs	r3, #0
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001116:	2300      	movs	r3, #0
 8001118:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800111a:	e148      	b.n	80013ae <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800111c:	2201      	movs	r2, #1
 800111e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	69fa      	ldr	r2, [r7, #28]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	429a      	cmp	r2, r3
 8001136:	f040 8137 	bne.w	80013a8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	4aa3      	ldr	r2, [pc, #652]	; (80013cc <HAL_GPIO_Init+0x2c4>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d05e      	beq.n	8001202 <HAL_GPIO_Init+0xfa>
 8001144:	4aa1      	ldr	r2, [pc, #644]	; (80013cc <HAL_GPIO_Init+0x2c4>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d875      	bhi.n	8001236 <HAL_GPIO_Init+0x12e>
 800114a:	4aa1      	ldr	r2, [pc, #644]	; (80013d0 <HAL_GPIO_Init+0x2c8>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d058      	beq.n	8001202 <HAL_GPIO_Init+0xfa>
 8001150:	4a9f      	ldr	r2, [pc, #636]	; (80013d0 <HAL_GPIO_Init+0x2c8>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d86f      	bhi.n	8001236 <HAL_GPIO_Init+0x12e>
 8001156:	4a9f      	ldr	r2, [pc, #636]	; (80013d4 <HAL_GPIO_Init+0x2cc>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d052      	beq.n	8001202 <HAL_GPIO_Init+0xfa>
 800115c:	4a9d      	ldr	r2, [pc, #628]	; (80013d4 <HAL_GPIO_Init+0x2cc>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d869      	bhi.n	8001236 <HAL_GPIO_Init+0x12e>
 8001162:	4a9d      	ldr	r2, [pc, #628]	; (80013d8 <HAL_GPIO_Init+0x2d0>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d04c      	beq.n	8001202 <HAL_GPIO_Init+0xfa>
 8001168:	4a9b      	ldr	r2, [pc, #620]	; (80013d8 <HAL_GPIO_Init+0x2d0>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d863      	bhi.n	8001236 <HAL_GPIO_Init+0x12e>
 800116e:	4a9b      	ldr	r2, [pc, #620]	; (80013dc <HAL_GPIO_Init+0x2d4>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d046      	beq.n	8001202 <HAL_GPIO_Init+0xfa>
 8001174:	4a99      	ldr	r2, [pc, #612]	; (80013dc <HAL_GPIO_Init+0x2d4>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d85d      	bhi.n	8001236 <HAL_GPIO_Init+0x12e>
 800117a:	2b12      	cmp	r3, #18
 800117c:	d82a      	bhi.n	80011d4 <HAL_GPIO_Init+0xcc>
 800117e:	2b12      	cmp	r3, #18
 8001180:	d859      	bhi.n	8001236 <HAL_GPIO_Init+0x12e>
 8001182:	a201      	add	r2, pc, #4	; (adr r2, 8001188 <HAL_GPIO_Init+0x80>)
 8001184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001188:	08001203 	.word	0x08001203
 800118c:	080011dd 	.word	0x080011dd
 8001190:	080011ef 	.word	0x080011ef
 8001194:	08001231 	.word	0x08001231
 8001198:	08001237 	.word	0x08001237
 800119c:	08001237 	.word	0x08001237
 80011a0:	08001237 	.word	0x08001237
 80011a4:	08001237 	.word	0x08001237
 80011a8:	08001237 	.word	0x08001237
 80011ac:	08001237 	.word	0x08001237
 80011b0:	08001237 	.word	0x08001237
 80011b4:	08001237 	.word	0x08001237
 80011b8:	08001237 	.word	0x08001237
 80011bc:	08001237 	.word	0x08001237
 80011c0:	08001237 	.word	0x08001237
 80011c4:	08001237 	.word	0x08001237
 80011c8:	08001237 	.word	0x08001237
 80011cc:	080011e5 	.word	0x080011e5
 80011d0:	080011f9 	.word	0x080011f9
 80011d4:	4a82      	ldr	r2, [pc, #520]	; (80013e0 <HAL_GPIO_Init+0x2d8>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d013      	beq.n	8001202 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011da:	e02c      	b.n	8001236 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	623b      	str	r3, [r7, #32]
          break;
 80011e2:	e029      	b.n	8001238 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	3304      	adds	r3, #4
 80011ea:	623b      	str	r3, [r7, #32]
          break;
 80011ec:	e024      	b.n	8001238 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	3308      	adds	r3, #8
 80011f4:	623b      	str	r3, [r7, #32]
          break;
 80011f6:	e01f      	b.n	8001238 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	330c      	adds	r3, #12
 80011fe:	623b      	str	r3, [r7, #32]
          break;
 8001200:	e01a      	b.n	8001238 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d102      	bne.n	8001210 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800120a:	2304      	movs	r3, #4
 800120c:	623b      	str	r3, [r7, #32]
          break;
 800120e:	e013      	b.n	8001238 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d105      	bne.n	8001224 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001218:	2308      	movs	r3, #8
 800121a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	69fa      	ldr	r2, [r7, #28]
 8001220:	611a      	str	r2, [r3, #16]
          break;
 8001222:	e009      	b.n	8001238 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001224:	2308      	movs	r3, #8
 8001226:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	69fa      	ldr	r2, [r7, #28]
 800122c:	615a      	str	r2, [r3, #20]
          break;
 800122e:	e003      	b.n	8001238 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001230:	2300      	movs	r3, #0
 8001232:	623b      	str	r3, [r7, #32]
          break;
 8001234:	e000      	b.n	8001238 <HAL_GPIO_Init+0x130>
          break;
 8001236:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	2bff      	cmp	r3, #255	; 0xff
 800123c:	d801      	bhi.n	8001242 <HAL_GPIO_Init+0x13a>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	e001      	b.n	8001246 <HAL_GPIO_Init+0x13e>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	3304      	adds	r3, #4
 8001246:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	2bff      	cmp	r3, #255	; 0xff
 800124c:	d802      	bhi.n	8001254 <HAL_GPIO_Init+0x14c>
 800124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	e002      	b.n	800125a <HAL_GPIO_Init+0x152>
 8001254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001256:	3b08      	subs	r3, #8
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	210f      	movs	r1, #15
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	fa01 f303 	lsl.w	r3, r1, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	401a      	ands	r2, r3
 800126c:	6a39      	ldr	r1, [r7, #32]
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	fa01 f303 	lsl.w	r3, r1, r3
 8001274:	431a      	orrs	r2, r3
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001282:	2b00      	cmp	r3, #0
 8001284:	f000 8090 	beq.w	80013a8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001288:	4b56      	ldr	r3, [pc, #344]	; (80013e4 <HAL_GPIO_Init+0x2dc>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	4a55      	ldr	r2, [pc, #340]	; (80013e4 <HAL_GPIO_Init+0x2dc>)
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	6193      	str	r3, [r2, #24]
 8001294:	4b53      	ldr	r3, [pc, #332]	; (80013e4 <HAL_GPIO_Init+0x2dc>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012a0:	4a51      	ldr	r2, [pc, #324]	; (80013e8 <HAL_GPIO_Init+0x2e0>)
 80012a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a4:	089b      	lsrs	r3, r3, #2
 80012a6:	3302      	adds	r3, #2
 80012a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	220f      	movs	r2, #15
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	4013      	ands	r3, r2
 80012c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a49      	ldr	r2, [pc, #292]	; (80013ec <HAL_GPIO_Init+0x2e4>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d00d      	beq.n	80012e8 <HAL_GPIO_Init+0x1e0>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a48      	ldr	r2, [pc, #288]	; (80013f0 <HAL_GPIO_Init+0x2e8>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d007      	beq.n	80012e4 <HAL_GPIO_Init+0x1dc>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a47      	ldr	r2, [pc, #284]	; (80013f4 <HAL_GPIO_Init+0x2ec>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d101      	bne.n	80012e0 <HAL_GPIO_Init+0x1d8>
 80012dc:	2302      	movs	r3, #2
 80012de:	e004      	b.n	80012ea <HAL_GPIO_Init+0x1e2>
 80012e0:	2303      	movs	r3, #3
 80012e2:	e002      	b.n	80012ea <HAL_GPIO_Init+0x1e2>
 80012e4:	2301      	movs	r3, #1
 80012e6:	e000      	b.n	80012ea <HAL_GPIO_Init+0x1e2>
 80012e8:	2300      	movs	r3, #0
 80012ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012ec:	f002 0203 	and.w	r2, r2, #3
 80012f0:	0092      	lsls	r2, r2, #2
 80012f2:	4093      	lsls	r3, r2
 80012f4:	68fa      	ldr	r2, [r7, #12]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012fa:	493b      	ldr	r1, [pc, #236]	; (80013e8 <HAL_GPIO_Init+0x2e0>)
 80012fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fe:	089b      	lsrs	r3, r3, #2
 8001300:	3302      	adds	r3, #2
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d006      	beq.n	8001322 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001314:	4b38      	ldr	r3, [pc, #224]	; (80013f8 <HAL_GPIO_Init+0x2f0>)
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	4937      	ldr	r1, [pc, #220]	; (80013f8 <HAL_GPIO_Init+0x2f0>)
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	4313      	orrs	r3, r2
 800131e:	608b      	str	r3, [r1, #8]
 8001320:	e006      	b.n	8001330 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001322:	4b35      	ldr	r3, [pc, #212]	; (80013f8 <HAL_GPIO_Init+0x2f0>)
 8001324:	689a      	ldr	r2, [r3, #8]
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	43db      	mvns	r3, r3
 800132a:	4933      	ldr	r1, [pc, #204]	; (80013f8 <HAL_GPIO_Init+0x2f0>)
 800132c:	4013      	ands	r3, r2
 800132e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d006      	beq.n	800134a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800133c:	4b2e      	ldr	r3, [pc, #184]	; (80013f8 <HAL_GPIO_Init+0x2f0>)
 800133e:	68da      	ldr	r2, [r3, #12]
 8001340:	492d      	ldr	r1, [pc, #180]	; (80013f8 <HAL_GPIO_Init+0x2f0>)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	4313      	orrs	r3, r2
 8001346:	60cb      	str	r3, [r1, #12]
 8001348:	e006      	b.n	8001358 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800134a:	4b2b      	ldr	r3, [pc, #172]	; (80013f8 <HAL_GPIO_Init+0x2f0>)
 800134c:	68da      	ldr	r2, [r3, #12]
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	43db      	mvns	r3, r3
 8001352:	4929      	ldr	r1, [pc, #164]	; (80013f8 <HAL_GPIO_Init+0x2f0>)
 8001354:	4013      	ands	r3, r2
 8001356:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d006      	beq.n	8001372 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001364:	4b24      	ldr	r3, [pc, #144]	; (80013f8 <HAL_GPIO_Init+0x2f0>)
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	4923      	ldr	r1, [pc, #140]	; (80013f8 <HAL_GPIO_Init+0x2f0>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	4313      	orrs	r3, r2
 800136e:	604b      	str	r3, [r1, #4]
 8001370:	e006      	b.n	8001380 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001372:	4b21      	ldr	r3, [pc, #132]	; (80013f8 <HAL_GPIO_Init+0x2f0>)
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	43db      	mvns	r3, r3
 800137a:	491f      	ldr	r1, [pc, #124]	; (80013f8 <HAL_GPIO_Init+0x2f0>)
 800137c:	4013      	ands	r3, r2
 800137e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d006      	beq.n	800139a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800138c:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <HAL_GPIO_Init+0x2f0>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4919      	ldr	r1, [pc, #100]	; (80013f8 <HAL_GPIO_Init+0x2f0>)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	4313      	orrs	r3, r2
 8001396:	600b      	str	r3, [r1, #0]
 8001398:	e006      	b.n	80013a8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800139a:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <HAL_GPIO_Init+0x2f0>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	4915      	ldr	r1, [pc, #84]	; (80013f8 <HAL_GPIO_Init+0x2f0>)
 80013a4:	4013      	ands	r3, r2
 80013a6:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013aa:	3301      	adds	r3, #1
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	fa22 f303 	lsr.w	r3, r2, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f47f aeaf 	bne.w	800111c <HAL_GPIO_Init+0x14>
  }
}
 80013be:	bf00      	nop
 80013c0:	bf00      	nop
 80013c2:	372c      	adds	r7, #44	; 0x2c
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	10320000 	.word	0x10320000
 80013d0:	10310000 	.word	0x10310000
 80013d4:	10220000 	.word	0x10220000
 80013d8:	10210000 	.word	0x10210000
 80013dc:	10120000 	.word	0x10120000
 80013e0:	10110000 	.word	0x10110000
 80013e4:	40021000 	.word	0x40021000
 80013e8:	40010000 	.word	0x40010000
 80013ec:	40010800 	.word	0x40010800
 80013f0:	40010c00 	.word	0x40010c00
 80013f4:	40011000 	.word	0x40011000
 80013f8:	40010400 	.word	0x40010400

080013fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	460b      	mov	r3, r1
 8001406:	807b      	strh	r3, [r7, #2]
 8001408:	4613      	mov	r3, r2
 800140a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800140c:	787b      	ldrb	r3, [r7, #1]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001412:	887a      	ldrh	r2, [r7, #2]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001418:	e003      	b.n	8001422 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800141a:	887b      	ldrh	r3, [r7, #2]
 800141c:	041a      	lsls	r2, r3, #16
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	611a      	str	r2, [r3, #16]
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d101      	bne.n	800143e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e26c      	b.n	8001918 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 8087 	beq.w	800155a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800144c:	4b92      	ldr	r3, [pc, #584]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 030c 	and.w	r3, r3, #12
 8001454:	2b04      	cmp	r3, #4
 8001456:	d00c      	beq.n	8001472 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001458:	4b8f      	ldr	r3, [pc, #572]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 030c 	and.w	r3, r3, #12
 8001460:	2b08      	cmp	r3, #8
 8001462:	d112      	bne.n	800148a <HAL_RCC_OscConfig+0x5e>
 8001464:	4b8c      	ldr	r3, [pc, #560]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800146c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001470:	d10b      	bne.n	800148a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001472:	4b89      	ldr	r3, [pc, #548]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d06c      	beq.n	8001558 <HAL_RCC_OscConfig+0x12c>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d168      	bne.n	8001558 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e246      	b.n	8001918 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001492:	d106      	bne.n	80014a2 <HAL_RCC_OscConfig+0x76>
 8001494:	4b80      	ldr	r3, [pc, #512]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a7f      	ldr	r2, [pc, #508]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 800149a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	e02e      	b.n	8001500 <HAL_RCC_OscConfig+0xd4>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10c      	bne.n	80014c4 <HAL_RCC_OscConfig+0x98>
 80014aa:	4b7b      	ldr	r3, [pc, #492]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a7a      	ldr	r2, [pc, #488]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80014b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014b4:	6013      	str	r3, [r2, #0]
 80014b6:	4b78      	ldr	r3, [pc, #480]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a77      	ldr	r2, [pc, #476]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80014bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	e01d      	b.n	8001500 <HAL_RCC_OscConfig+0xd4>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014cc:	d10c      	bne.n	80014e8 <HAL_RCC_OscConfig+0xbc>
 80014ce:	4b72      	ldr	r3, [pc, #456]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a71      	ldr	r2, [pc, #452]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80014d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	4b6f      	ldr	r3, [pc, #444]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a6e      	ldr	r2, [pc, #440]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80014e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	e00b      	b.n	8001500 <HAL_RCC_OscConfig+0xd4>
 80014e8:	4b6b      	ldr	r3, [pc, #428]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a6a      	ldr	r2, [pc, #424]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80014ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	4b68      	ldr	r3, [pc, #416]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a67      	ldr	r2, [pc, #412]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80014fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d013      	beq.n	8001530 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001508:	f7ff fcec 	bl	8000ee4 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001510:	f7ff fce8 	bl	8000ee4 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b64      	cmp	r3, #100	; 0x64
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e1fa      	b.n	8001918 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001522:	4b5d      	ldr	r3, [pc, #372]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0f0      	beq.n	8001510 <HAL_RCC_OscConfig+0xe4>
 800152e:	e014      	b.n	800155a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001530:	f7ff fcd8 	bl	8000ee4 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001538:	f7ff fcd4 	bl	8000ee4 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b64      	cmp	r3, #100	; 0x64
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e1e6      	b.n	8001918 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800154a:	4b53      	ldr	r3, [pc, #332]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f0      	bne.n	8001538 <HAL_RCC_OscConfig+0x10c>
 8001556:	e000      	b.n	800155a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d063      	beq.n	800162e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001566:	4b4c      	ldr	r3, [pc, #304]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f003 030c 	and.w	r3, r3, #12
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00b      	beq.n	800158a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001572:	4b49      	ldr	r3, [pc, #292]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f003 030c 	and.w	r3, r3, #12
 800157a:	2b08      	cmp	r3, #8
 800157c:	d11c      	bne.n	80015b8 <HAL_RCC_OscConfig+0x18c>
 800157e:	4b46      	ldr	r3, [pc, #280]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d116      	bne.n	80015b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800158a:	4b43      	ldr	r3, [pc, #268]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d005      	beq.n	80015a2 <HAL_RCC_OscConfig+0x176>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d001      	beq.n	80015a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e1ba      	b.n	8001918 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a2:	4b3d      	ldr	r3, [pc, #244]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	4939      	ldr	r1, [pc, #228]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015b6:	e03a      	b.n	800162e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d020      	beq.n	8001602 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015c0:	4b36      	ldr	r3, [pc, #216]	; (800169c <HAL_RCC_OscConfig+0x270>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c6:	f7ff fc8d 	bl	8000ee4 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ce:	f7ff fc89 	bl	8000ee4 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e19b      	b.n	8001918 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e0:	4b2d      	ldr	r3, [pc, #180]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0f0      	beq.n	80015ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ec:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	4927      	ldr	r1, [pc, #156]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 80015fc:	4313      	orrs	r3, r2
 80015fe:	600b      	str	r3, [r1, #0]
 8001600:	e015      	b.n	800162e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001602:	4b26      	ldr	r3, [pc, #152]	; (800169c <HAL_RCC_OscConfig+0x270>)
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001608:	f7ff fc6c 	bl	8000ee4 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001610:	f7ff fc68 	bl	8000ee4 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e17a      	b.n	8001918 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001622:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f0      	bne.n	8001610 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0308 	and.w	r3, r3, #8
 8001636:	2b00      	cmp	r3, #0
 8001638:	d03a      	beq.n	80016b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d019      	beq.n	8001676 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001642:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <HAL_RCC_OscConfig+0x274>)
 8001644:	2201      	movs	r2, #1
 8001646:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001648:	f7ff fc4c 	bl	8000ee4 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001650:	f7ff fc48 	bl	8000ee4 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e15a      	b.n	8001918 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001662:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <HAL_RCC_OscConfig+0x26c>)
 8001664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d0f0      	beq.n	8001650 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800166e:	2001      	movs	r0, #1
 8001670:	f000 fa9a 	bl	8001ba8 <RCC_Delay>
 8001674:	e01c      	b.n	80016b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001676:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <HAL_RCC_OscConfig+0x274>)
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800167c:	f7ff fc32 	bl	8000ee4 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001682:	e00f      	b.n	80016a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001684:	f7ff fc2e 	bl	8000ee4 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d908      	bls.n	80016a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e140      	b.n	8001918 <HAL_RCC_OscConfig+0x4ec>
 8001696:	bf00      	nop
 8001698:	40021000 	.word	0x40021000
 800169c:	42420000 	.word	0x42420000
 80016a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a4:	4b9e      	ldr	r3, [pc, #632]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 80016a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1e9      	bne.n	8001684 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f000 80a6 	beq.w	800180a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016be:	2300      	movs	r3, #0
 80016c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016c2:	4b97      	ldr	r3, [pc, #604]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d10d      	bne.n	80016ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ce:	4b94      	ldr	r3, [pc, #592]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	4a93      	ldr	r2, [pc, #588]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 80016d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d8:	61d3      	str	r3, [r2, #28]
 80016da:	4b91      	ldr	r3, [pc, #580]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016e6:	2301      	movs	r3, #1
 80016e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ea:	4b8e      	ldr	r3, [pc, #568]	; (8001924 <HAL_RCC_OscConfig+0x4f8>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d118      	bne.n	8001728 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016f6:	4b8b      	ldr	r3, [pc, #556]	; (8001924 <HAL_RCC_OscConfig+0x4f8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a8a      	ldr	r2, [pc, #552]	; (8001924 <HAL_RCC_OscConfig+0x4f8>)
 80016fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001700:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001702:	f7ff fbef 	bl	8000ee4 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800170a:	f7ff fbeb 	bl	8000ee4 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b64      	cmp	r3, #100	; 0x64
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e0fd      	b.n	8001918 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800171c:	4b81      	ldr	r3, [pc, #516]	; (8001924 <HAL_RCC_OscConfig+0x4f8>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0f0      	beq.n	800170a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d106      	bne.n	800173e <HAL_RCC_OscConfig+0x312>
 8001730:	4b7b      	ldr	r3, [pc, #492]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	4a7a      	ldr	r2, [pc, #488]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	6213      	str	r3, [r2, #32]
 800173c:	e02d      	b.n	800179a <HAL_RCC_OscConfig+0x36e>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10c      	bne.n	8001760 <HAL_RCC_OscConfig+0x334>
 8001746:	4b76      	ldr	r3, [pc, #472]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 8001748:	6a1b      	ldr	r3, [r3, #32]
 800174a:	4a75      	ldr	r2, [pc, #468]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 800174c:	f023 0301 	bic.w	r3, r3, #1
 8001750:	6213      	str	r3, [r2, #32]
 8001752:	4b73      	ldr	r3, [pc, #460]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	4a72      	ldr	r2, [pc, #456]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 8001758:	f023 0304 	bic.w	r3, r3, #4
 800175c:	6213      	str	r3, [r2, #32]
 800175e:	e01c      	b.n	800179a <HAL_RCC_OscConfig+0x36e>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	2b05      	cmp	r3, #5
 8001766:	d10c      	bne.n	8001782 <HAL_RCC_OscConfig+0x356>
 8001768:	4b6d      	ldr	r3, [pc, #436]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	4a6c      	ldr	r2, [pc, #432]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 800176e:	f043 0304 	orr.w	r3, r3, #4
 8001772:	6213      	str	r3, [r2, #32]
 8001774:	4b6a      	ldr	r3, [pc, #424]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	4a69      	ldr	r2, [pc, #420]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	6213      	str	r3, [r2, #32]
 8001780:	e00b      	b.n	800179a <HAL_RCC_OscConfig+0x36e>
 8001782:	4b67      	ldr	r3, [pc, #412]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 8001784:	6a1b      	ldr	r3, [r3, #32]
 8001786:	4a66      	ldr	r2, [pc, #408]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 8001788:	f023 0301 	bic.w	r3, r3, #1
 800178c:	6213      	str	r3, [r2, #32]
 800178e:	4b64      	ldr	r3, [pc, #400]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	4a63      	ldr	r2, [pc, #396]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 8001794:	f023 0304 	bic.w	r3, r3, #4
 8001798:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d015      	beq.n	80017ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a2:	f7ff fb9f 	bl	8000ee4 <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a8:	e00a      	b.n	80017c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017aa:	f7ff fb9b 	bl	8000ee4 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e0ab      	b.n	8001918 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c0:	4b57      	ldr	r3, [pc, #348]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d0ee      	beq.n	80017aa <HAL_RCC_OscConfig+0x37e>
 80017cc:	e014      	b.n	80017f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ce:	f7ff fb89 	bl	8000ee4 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d4:	e00a      	b.n	80017ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d6:	f7ff fb85 	bl	8000ee4 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e095      	b.n	8001918 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ec:	4b4c      	ldr	r3, [pc, #304]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d1ee      	bne.n	80017d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017f8:	7dfb      	ldrb	r3, [r7, #23]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d105      	bne.n	800180a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017fe:	4b48      	ldr	r3, [pc, #288]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	4a47      	ldr	r2, [pc, #284]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 8001804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001808:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 8081 	beq.w	8001916 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001814:	4b42      	ldr	r3, [pc, #264]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 030c 	and.w	r3, r3, #12
 800181c:	2b08      	cmp	r3, #8
 800181e:	d061      	beq.n	80018e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	69db      	ldr	r3, [r3, #28]
 8001824:	2b02      	cmp	r3, #2
 8001826:	d146      	bne.n	80018b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001828:	4b3f      	ldr	r3, [pc, #252]	; (8001928 <HAL_RCC_OscConfig+0x4fc>)
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182e:	f7ff fb59 	bl	8000ee4 <HAL_GetTick>
 8001832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001836:	f7ff fb55 	bl	8000ee4 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e067      	b.n	8001918 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001848:	4b35      	ldr	r3, [pc, #212]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1f0      	bne.n	8001836 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800185c:	d108      	bne.n	8001870 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800185e:	4b30      	ldr	r3, [pc, #192]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	492d      	ldr	r1, [pc, #180]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 800186c:	4313      	orrs	r3, r2
 800186e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001870:	4b2b      	ldr	r3, [pc, #172]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a19      	ldr	r1, [r3, #32]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001880:	430b      	orrs	r3, r1
 8001882:	4927      	ldr	r1, [pc, #156]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 8001884:	4313      	orrs	r3, r2
 8001886:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001888:	4b27      	ldr	r3, [pc, #156]	; (8001928 <HAL_RCC_OscConfig+0x4fc>)
 800188a:	2201      	movs	r2, #1
 800188c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188e:	f7ff fb29 	bl	8000ee4 <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001896:	f7ff fb25 	bl	8000ee4 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e037      	b.n	8001918 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018a8:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0f0      	beq.n	8001896 <HAL_RCC_OscConfig+0x46a>
 80018b4:	e02f      	b.n	8001916 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b6:	4b1c      	ldr	r3, [pc, #112]	; (8001928 <HAL_RCC_OscConfig+0x4fc>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018bc:	f7ff fb12 	bl	8000ee4 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c4:	f7ff fb0e 	bl	8000ee4 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e020      	b.n	8001918 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d6:	4b12      	ldr	r3, [pc, #72]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f0      	bne.n	80018c4 <HAL_RCC_OscConfig+0x498>
 80018e2:	e018      	b.n	8001916 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d101      	bne.n	80018f0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e013      	b.n	8001918 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_RCC_OscConfig+0x4f4>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	429a      	cmp	r2, r3
 8001902:	d106      	bne.n	8001912 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800190e:	429a      	cmp	r2, r3
 8001910:	d001      	beq.n	8001916 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e000      	b.n	8001918 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40021000 	.word	0x40021000
 8001924:	40007000 	.word	0x40007000
 8001928:	42420060 	.word	0x42420060

0800192c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e0d0      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001940:	4b6a      	ldr	r3, [pc, #424]	; (8001aec <HAL_RCC_ClockConfig+0x1c0>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0307 	and.w	r3, r3, #7
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	d910      	bls.n	8001970 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194e:	4b67      	ldr	r3, [pc, #412]	; (8001aec <HAL_RCC_ClockConfig+0x1c0>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f023 0207 	bic.w	r2, r3, #7
 8001956:	4965      	ldr	r1, [pc, #404]	; (8001aec <HAL_RCC_ClockConfig+0x1c0>)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	4313      	orrs	r3, r2
 800195c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800195e:	4b63      	ldr	r3, [pc, #396]	; (8001aec <HAL_RCC_ClockConfig+0x1c0>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	d001      	beq.n	8001970 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e0b8      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d020      	beq.n	80019be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b00      	cmp	r3, #0
 8001986:	d005      	beq.n	8001994 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001988:	4b59      	ldr	r3, [pc, #356]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	4a58      	ldr	r2, [pc, #352]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 800198e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001992:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0308 	and.w	r3, r3, #8
 800199c:	2b00      	cmp	r3, #0
 800199e:	d005      	beq.n	80019ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019a0:	4b53      	ldr	r3, [pc, #332]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	4a52      	ldr	r2, [pc, #328]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 80019a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019ac:	4b50      	ldr	r3, [pc, #320]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	494d      	ldr	r1, [pc, #308]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d040      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d107      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d2:	4b47      	ldr	r3, [pc, #284]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d115      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e07f      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d107      	bne.n	80019fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ea:	4b41      	ldr	r3, [pc, #260]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d109      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e073      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019fa:	4b3d      	ldr	r3, [pc, #244]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e06b      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a0a:	4b39      	ldr	r3, [pc, #228]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f023 0203 	bic.w	r2, r3, #3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	4936      	ldr	r1, [pc, #216]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a1c:	f7ff fa62 	bl	8000ee4 <HAL_GetTick>
 8001a20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a22:	e00a      	b.n	8001a3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a24:	f7ff fa5e 	bl	8000ee4 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e053      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3a:	4b2d      	ldr	r3, [pc, #180]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 020c 	and.w	r2, r3, #12
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d1eb      	bne.n	8001a24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a4c:	4b27      	ldr	r3, [pc, #156]	; (8001aec <HAL_RCC_ClockConfig+0x1c0>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d210      	bcs.n	8001a7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5a:	4b24      	ldr	r3, [pc, #144]	; (8001aec <HAL_RCC_ClockConfig+0x1c0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f023 0207 	bic.w	r2, r3, #7
 8001a62:	4922      	ldr	r1, [pc, #136]	; (8001aec <HAL_RCC_ClockConfig+0x1c0>)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6a:	4b20      	ldr	r3, [pc, #128]	; (8001aec <HAL_RCC_ClockConfig+0x1c0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d001      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e032      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d008      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a88:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	4916      	ldr	r1, [pc, #88]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d009      	beq.n	8001aba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001aa6:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	490e      	ldr	r1, [pc, #56]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001aba:	f000 f821 	bl	8001b00 <HAL_RCC_GetSysClockFreq>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	091b      	lsrs	r3, r3, #4
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	490a      	ldr	r1, [pc, #40]	; (8001af4 <HAL_RCC_ClockConfig+0x1c8>)
 8001acc:	5ccb      	ldrb	r3, [r1, r3]
 8001ace:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad2:	4a09      	ldr	r2, [pc, #36]	; (8001af8 <HAL_RCC_ClockConfig+0x1cc>)
 8001ad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ad6:	4b09      	ldr	r3, [pc, #36]	; (8001afc <HAL_RCC_ClockConfig+0x1d0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff f9c0 	bl	8000e60 <HAL_InitTick>

  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40022000 	.word	0x40022000
 8001af0:	40021000 	.word	0x40021000
 8001af4:	08001c54 	.word	0x08001c54
 8001af8:	2000000c 	.word	0x2000000c
 8001afc:	20000010 	.word	0x20000010

08001b00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b087      	sub	sp, #28
 8001b04:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
 8001b12:	2300      	movs	r3, #0
 8001b14:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b1a:	4b1e      	ldr	r3, [pc, #120]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f003 030c 	and.w	r3, r3, #12
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	d002      	beq.n	8001b30 <HAL_RCC_GetSysClockFreq+0x30>
 8001b2a:	2b08      	cmp	r3, #8
 8001b2c:	d003      	beq.n	8001b36 <HAL_RCC_GetSysClockFreq+0x36>
 8001b2e:	e027      	b.n	8001b80 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b30:	4b19      	ldr	r3, [pc, #100]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b32:	613b      	str	r3, [r7, #16]
      break;
 8001b34:	e027      	b.n	8001b86 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	0c9b      	lsrs	r3, r3, #18
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	4a17      	ldr	r2, [pc, #92]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b40:	5cd3      	ldrb	r3, [r2, r3]
 8001b42:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d010      	beq.n	8001b70 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b4e:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	0c5b      	lsrs	r3, r3, #17
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	4a11      	ldr	r2, [pc, #68]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b5a:	5cd3      	ldrb	r3, [r2, r3]
 8001b5c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a0d      	ldr	r2, [pc, #52]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b62:	fb02 f203 	mul.w	r2, r2, r3
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6c:	617b      	str	r3, [r7, #20]
 8001b6e:	e004      	b.n	8001b7a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a0c      	ldr	r2, [pc, #48]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b74:	fb02 f303 	mul.w	r3, r2, r3
 8001b78:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	613b      	str	r3, [r7, #16]
      break;
 8001b7e:	e002      	b.n	8001b86 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b80:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b82:	613b      	str	r3, [r7, #16]
      break;
 8001b84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b86:	693b      	ldr	r3, [r7, #16]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	371c      	adds	r7, #28
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	40021000 	.word	0x40021000
 8001b98:	007a1200 	.word	0x007a1200
 8001b9c:	08001c64 	.word	0x08001c64
 8001ba0:	08001c74 	.word	0x08001c74
 8001ba4:	003d0900 	.word	0x003d0900

08001ba8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bb0:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <RCC_Delay+0x34>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0a      	ldr	r2, [pc, #40]	; (8001be0 <RCC_Delay+0x38>)
 8001bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bba:	0a5b      	lsrs	r3, r3, #9
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	fb02 f303 	mul.w	r3, r2, r3
 8001bc2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bc4:	bf00      	nop
  }
  while (Delay --);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	1e5a      	subs	r2, r3, #1
 8001bca:	60fa      	str	r2, [r7, #12]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1f9      	bne.n	8001bc4 <RCC_Delay+0x1c>
}
 8001bd0:	bf00      	nop
 8001bd2:	bf00      	nop
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr
 8001bdc:	2000000c 	.word	0x2000000c
 8001be0:	10624dd3 	.word	0x10624dd3

08001be4 <__libc_init_array>:
 8001be4:	b570      	push	{r4, r5, r6, lr}
 8001be6:	2600      	movs	r6, #0
 8001be8:	4d0c      	ldr	r5, [pc, #48]	; (8001c1c <__libc_init_array+0x38>)
 8001bea:	4c0d      	ldr	r4, [pc, #52]	; (8001c20 <__libc_init_array+0x3c>)
 8001bec:	1b64      	subs	r4, r4, r5
 8001bee:	10a4      	asrs	r4, r4, #2
 8001bf0:	42a6      	cmp	r6, r4
 8001bf2:	d109      	bne.n	8001c08 <__libc_init_array+0x24>
 8001bf4:	f000 f822 	bl	8001c3c <_init>
 8001bf8:	2600      	movs	r6, #0
 8001bfa:	4d0a      	ldr	r5, [pc, #40]	; (8001c24 <__libc_init_array+0x40>)
 8001bfc:	4c0a      	ldr	r4, [pc, #40]	; (8001c28 <__libc_init_array+0x44>)
 8001bfe:	1b64      	subs	r4, r4, r5
 8001c00:	10a4      	asrs	r4, r4, #2
 8001c02:	42a6      	cmp	r6, r4
 8001c04:	d105      	bne.n	8001c12 <__libc_init_array+0x2e>
 8001c06:	bd70      	pop	{r4, r5, r6, pc}
 8001c08:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c0c:	4798      	blx	r3
 8001c0e:	3601      	adds	r6, #1
 8001c10:	e7ee      	b.n	8001bf0 <__libc_init_array+0xc>
 8001c12:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c16:	4798      	blx	r3
 8001c18:	3601      	adds	r6, #1
 8001c1a:	e7f2      	b.n	8001c02 <__libc_init_array+0x1e>
 8001c1c:	08001c78 	.word	0x08001c78
 8001c20:	08001c78 	.word	0x08001c78
 8001c24:	08001c78 	.word	0x08001c78
 8001c28:	08001c7c 	.word	0x08001c7c

08001c2c <memset>:
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4402      	add	r2, r0
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d100      	bne.n	8001c36 <memset+0xa>
 8001c34:	4770      	bx	lr
 8001c36:	f803 1b01 	strb.w	r1, [r3], #1
 8001c3a:	e7f9      	b.n	8001c30 <memset+0x4>

08001c3c <_init>:
 8001c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c3e:	bf00      	nop
 8001c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c42:	bc08      	pop	{r3}
 8001c44:	469e      	mov	lr, r3
 8001c46:	4770      	bx	lr

08001c48 <_fini>:
 8001c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c4a:	bf00      	nop
 8001c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c4e:	bc08      	pop	{r3}
 8001c50:	469e      	mov	lr, r3
 8001c52:	4770      	bx	lr
